/* automatically generated by rust-bindgen 0.69.4 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RCUTILS_RET_OK: u32 = 0;
pub const RCUTILS_RET_WARN: u32 = 1;
pub const RCUTILS_RET_ERROR: u32 = 2;
pub const RCUTILS_RET_BAD_ALLOC: u32 = 10;
pub const RCUTILS_RET_INVALID_ARGUMENT: u32 = 11;
pub const RCUTILS_RET_NOT_ENOUGH_SPACE: u32 = 12;
pub const RCUTILS_RET_NOT_INITIALIZED: u32 = 13;
pub const RCUTILS_RET_NOT_FOUND: u32 = 14;
pub const RCUTILS_RET_STRING_MAP_ALREADY_INIT: u32 = 30;
pub const RCUTILS_RET_STRING_MAP_INVALID: u32 = 31;
pub const RCUTILS_RET_STRING_KEY_NOT_FOUND: u32 = 32;
pub const RCUTILS_RET_LOGGING_SEVERITY_MAP_INVALID: u32 = 40;
pub const RCUTILS_RET_LOGGING_SEVERITY_STRING_INVALID: u32 = 41;
pub const RCUTILS_RET_HASH_MAP_NO_MORE_ENTRIES: u32 = 50;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const RMW_DEFAULT_DOMAIN_ID: i32 = -1;
pub const RMW_RET_OK: u32 = 0;
pub const RMW_RET_ERROR: u32 = 1;
pub const RMW_RET_TIMEOUT: u32 = 2;
pub const RMW_RET_UNSUPPORTED: u32 = 3;
pub const RMW_RET_BAD_ALLOC: u32 = 10;
pub const RMW_RET_INVALID_ARGUMENT: u32 = 11;
pub const RMW_RET_INCORRECT_RMW_IMPLEMENTATION: u32 = 12;
pub const RMW_RET_NODE_NAME_NON_EXISTENT: u32 = 203;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const RCUTILS_FAULT_INJECTION_NEVER_FAIL: i32 = -1;
pub const RCUTILS_FAULT_INJECTION_FAIL_NOW: u32 = 0;
pub const RCUTILS_ERROR_STATE_LINE_NUMBER_STR_MAX_LENGTH: u32 = 20;
pub const RCUTILS_ERROR_FORMATTING_CHARACTERS: u32 = 6;
pub const RCUTILS_ERROR_MESSAGE_MAX_LENGTH: u32 = 1024;
pub const RCUTILS_ERROR_STATE_MESSAGE_MAX_LENGTH: u32 = 768;
pub const RCUTILS_ERROR_STATE_FILE_MAX_LENGTH: u32 = 229;
pub const RCUTILS_LOGGING_SEPARATOR_STRING: &[u8; 2] = b".\0";
pub const RMW_GID_STORAGE_SIZE: u32 = 24;
pub const RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE_DEPRECATED_MSG : & [u8 ; 145] = b"RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE is deprecated. Use RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC if manually asserted liveliness is needed.\0" ;
pub const RCL_RET_OK: u32 = 0;
pub const RCL_RET_ERROR: u32 = 1;
pub const RCL_RET_TIMEOUT: u32 = 2;
pub const RCL_RET_BAD_ALLOC: u32 = 10;
pub const RCL_RET_INVALID_ARGUMENT: u32 = 11;
pub const RCL_RET_UNSUPPORTED: u32 = 3;
pub const RCL_RET_ALREADY_INIT: u32 = 100;
pub const RCL_RET_NOT_INIT: u32 = 101;
pub const RCL_RET_MISMATCHED_RMW_ID: u32 = 102;
pub const RCL_RET_TOPIC_NAME_INVALID: u32 = 103;
pub const RCL_RET_SERVICE_NAME_INVALID: u32 = 104;
pub const RCL_RET_UNKNOWN_SUBSTITUTION: u32 = 105;
pub const RCL_RET_ALREADY_SHUTDOWN: u32 = 106;
pub const RCL_RET_NODE_INVALID: u32 = 200;
pub const RCL_RET_NODE_INVALID_NAME: u32 = 201;
pub const RCL_RET_NODE_INVALID_NAMESPACE: u32 = 202;
pub const RCL_RET_NODE_NAME_NON_EXISTENT: u32 = 203;
pub const RCL_RET_PUBLISHER_INVALID: u32 = 300;
pub const RCL_RET_SUBSCRIPTION_INVALID: u32 = 400;
pub const RCL_RET_SUBSCRIPTION_TAKE_FAILED: u32 = 401;
pub const RCL_RET_CLIENT_INVALID: u32 = 500;
pub const RCL_RET_CLIENT_TAKE_FAILED: u32 = 501;
pub const RCL_RET_SERVICE_INVALID: u32 = 600;
pub const RCL_RET_SERVICE_TAKE_FAILED: u32 = 601;
pub const RCL_RET_TIMER_INVALID: u32 = 800;
pub const RCL_RET_TIMER_CANCELED: u32 = 801;
pub const RCL_RET_WAIT_SET_INVALID: u32 = 900;
pub const RCL_RET_WAIT_SET_EMPTY: u32 = 901;
pub const RCL_RET_WAIT_SET_FULL: u32 = 902;
pub const RCL_RET_INVALID_REMAP_RULE: u32 = 1001;
pub const RCL_RET_WRONG_LEXEME: u32 = 1002;
pub const RCL_RET_INVALID_ROS_ARGS: u32 = 1003;
pub const RCL_RET_INVALID_PARAM_RULE: u32 = 1010;
pub const RCL_RET_INVALID_LOG_LEVEL_RULE: u32 = 1020;
pub const RCL_RET_EVENT_INVALID: u32 = 2000;
pub const RCL_RET_EVENT_TAKE_FAILED: u32 = 2001;
pub const RCL_RET_LIFECYCLE_STATE_REGISTERED: u32 = 3000;
pub const RCL_RET_LIFECYCLE_STATE_NOT_REGISTERED: u32 = 3001;
pub const RCL_ROS_ARGS_FLAG: &[u8; 11] = b"--ros-args\0";
pub const RCL_ROS_ARGS_EXPLICIT_END_TOKEN: &[u8; 3] = b"--\0";
pub const RCL_PARAM_FLAG: &[u8; 8] = b"--param\0";
pub const RCL_SHORT_PARAM_FLAG: &[u8; 3] = b"-p\0";
pub const RCL_PARAM_FILE_FLAG: &[u8; 14] = b"--params-file\0";
pub const RCL_REMAP_FLAG: &[u8; 8] = b"--remap\0";
pub const RCL_SHORT_REMAP_FLAG: &[u8; 3] = b"-r\0";
pub const RCL_ENCLAVE_FLAG: &[u8; 10] = b"--enclave\0";
pub const RCL_SHORT_ENCLAVE_FLAG: &[u8; 3] = b"-e\0";
pub const RCL_LOG_LEVEL_FLAG: &[u8; 12] = b"--log-level\0";
pub const RCL_EXTERNAL_LOG_CONFIG_FLAG: &[u8; 18] = b"--log-config-file\0";
pub const RCL_LOG_STDOUT_FLAG_SUFFIX: &[u8; 12] = b"stdout-logs\0";
pub const RCL_LOG_ROSOUT_FLAG_SUFFIX: &[u8; 12] = b"rosout-logs\0";
pub const RCL_LOG_EXT_LIB_FLAG_SUFFIX: &[u8; 18] = b"external-lib-logs\0";
pub const __alignas_is_defined: u32 = 1;
pub const __alignof_is_defined: u32 = 1;
pub const RCL_DEFAULT_DOMAIN_ID: i32 = -1;
pub const RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID: i32 = -1;
pub const RCL_RET_ACTION_NAME_INVALID: u32 = 2000;
pub const RCL_RET_ACTION_GOAL_ACCEPTED: u32 = 2100;
pub const RCL_RET_ACTION_GOAL_REJECTED: u32 = 2101;
pub const RCL_RET_ACTION_CLIENT_INVALID: u32 = 2102;
pub const RCL_RET_ACTION_CLIENT_TAKE_FAILED: u32 = 2103;
pub const RCL_RET_ACTION_SERVER_INVALID: u32 = 2200;
pub const RCL_RET_ACTION_SERVER_TAKE_FAILED: u32 = 2201;
pub const RCL_RET_ACTION_GOAL_HANDLE_INVALID: u32 = 2300;
pub const RCL_RET_ACTION_GOAL_EVENT_INVALID: u32 = 2301;
pub const UUID_SIZE: u32 = 16;
pub const GOAL_STATE_NUM_STATES: u32 = 7;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type rcutils_ret_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_allocator_s {
    pub allocate: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub deallocate: ::std::option::Option<
        unsafe extern "C" fn(
            pointer: *mut ::std::os::raw::c_void,
            state: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reallocate: ::std::option::Option<
        unsafe extern "C" fn(
            pointer: *mut ::std::os::raw::c_void,
            size: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub zero_allocate: ::std::option::Option<
        unsafe extern "C" fn(
            number_of_elements: usize,
            size_of_element: usize,
            state: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rcutils_allocator_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_allocator_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_allocator_s>(),
        40usize,
        concat!("Size of: ", stringify!(rcutils_allocator_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_allocator_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_allocator_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_allocator_s),
            "::",
            stringify!(allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deallocate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_allocator_s),
            "::",
            stringify!(deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reallocate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_allocator_s),
            "::",
            stringify!(reallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_allocate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_allocator_s),
            "::",
            stringify!(zero_allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_allocator_s),
            "::",
            stringify!(state)
        )
    );
}
pub type rcutils_allocator_t = rcutils_allocator_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_allocator() -> rcutils_allocator_t;
}
extern "C" {
    pub fn rcutils_get_default_allocator() -> rcutils_allocator_t;
}
extern "C" {
    pub fn rcutils_allocator_is_valid(allocator: *const rcutils_allocator_t) -> bool;
}
extern "C" {
    pub fn rcutils_reallocf(
        pointer: *mut ::std::os::raw::c_void,
        size: usize,
        allocator: *mut rcutils_allocator_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type rcl_allocator_t = rcutils_allocator_t;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_DEFAULT: rmw_localhost_only_e = 0;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_ENABLED: rmw_localhost_only_e = 1;
pub const rmw_localhost_only_e_RMW_LOCALHOST_ONLY_DISABLED: rmw_localhost_only_e = 2;
pub type rmw_localhost_only_e = ::std::os::raw::c_uint;
pub use self::rmw_localhost_only_e as rmw_localhost_only_t;
pub type rmw_ret_t = i32;
pub const rmw_security_enforcement_policy_e_RMW_SECURITY_ENFORCEMENT_PERMISSIVE:
    rmw_security_enforcement_policy_e = 0;
pub const rmw_security_enforcement_policy_e_RMW_SECURITY_ENFORCEMENT_ENFORCE:
    rmw_security_enforcement_policy_e = 1;
pub type rmw_security_enforcement_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_security_enforcement_policy_e as rmw_security_enforcement_policy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_security_options_s {
    pub enforce_security: rmw_security_enforcement_policy_t,
    pub security_root_path: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rmw_security_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_security_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_security_options_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_security_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_security_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_security_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enforce_security) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_security_options_s),
            "::",
            stringify!(enforce_security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_root_path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_security_options_s),
            "::",
            stringify!(security_root_path)
        )
    );
}
pub type rmw_security_options_t = rmw_security_options_s;
extern "C" {
    pub fn rmw_get_zero_initialized_security_options() -> rmw_security_options_t;
}
extern "C" {
    pub fn rmw_get_default_security_options() -> rmw_security_options_t;
}
extern "C" {
    pub fn rmw_security_options_copy(
        src: *const rmw_security_options_t,
        allocator: *const rcutils_allocator_t,
        dst: *mut rmw_security_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_security_options_set_root_path(
        security_root_path: *const ::std::os::raw::c_char,
        allocator: *const rcutils_allocator_t,
        security_options: *mut rmw_security_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_security_options_fini(
        security_options: *mut rmw_security_options_t,
        allocator: *const rcutils_allocator_t,
    ) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_init_options_impl_s {
    _unused: [u8; 0],
}
pub type rmw_init_options_impl_t = rmw_init_options_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_init_options_s {
    pub instance_id: u64,
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub domain_id: usize,
    pub security_options: rmw_security_options_t,
    pub localhost_only: rmw_localhost_only_t,
    pub enclave: *mut ::std::os::raw::c_char,
    pub allocator: rcutils_allocator_t,
    pub impl_: *mut rmw_init_options_impl_t,
}
#[test]
fn bindgen_test_layout_rmw_init_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_init_options_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_init_options_s>(),
        104usize,
        concat!("Size of: ", stringify!(rmw_init_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_init_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_init_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(instance_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(security_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localhost_only) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(localhost_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enclave) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(enclave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_init_options_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rmw_init_options_t = rmw_init_options_s;
extern "C" {
    pub fn rmw_get_zero_initialized_init_options() -> rmw_init_options_t;
}
extern "C" {
    pub fn rmw_init_options_init(
        init_options: *mut rmw_init_options_t,
        allocator: rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_init_options_copy(
        src: *const rmw_init_options_t,
        dst: *mut rmw_init_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_init_options_fini(init_options: *mut rmw_init_options_t) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_context_impl_s {
    _unused: [u8; 0],
}
pub type rmw_context_impl_t = rmw_context_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_context_s {
    pub instance_id: u64,
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub options: rmw_init_options_t,
    pub actual_domain_id: usize,
    pub impl_: *mut rmw_context_impl_t,
}
#[test]
fn bindgen_test_layout_rmw_context_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_context_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_context_s>(),
        136usize,
        concat!("Size of: ", stringify!(rmw_context_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_context_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_context_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_context_s),
            "::",
            stringify!(instance_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_context_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_context_s),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_domain_id) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_context_s),
            "::",
            stringify!(actual_domain_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_context_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rmw_context_t = rmw_context_s;
extern "C" {
    pub fn rmw_get_zero_initialized_context() -> rmw_context_t;
}
extern "C" {
    pub fn rmw_init(options: *const rmw_init_options_t, context: *mut rmw_context_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_shutdown(context: *mut rmw_context_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_context_fini(context: *mut rmw_context_t) -> rmw_ret_t;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcutils_snprintf(
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_vsnprintf(
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_fault_injection_is_test_complete() -> bool;
}
extern "C" {
    pub fn rcutils_fault_injection_set_count(count: int_least64_t);
}
extern "C" {
    pub fn rcutils_fault_injection_get_count() -> int_least64_t;
}
extern "C" {
    pub fn _rcutils_fault_injection_maybe_fail() -> int_least64_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_error_string_s {
    pub str_: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_rcutils_error_string_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_error_string_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_error_string_s>(),
        1024usize,
        concat!("Size of: ", stringify!(rcutils_error_string_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_error_string_s>(),
        1usize,
        concat!("Alignment of ", stringify!(rcutils_error_string_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_error_string_s),
            "::",
            stringify!(str_)
        )
    );
}
pub type rcutils_error_string_t = rcutils_error_string_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_error_state_s {
    pub message: [::std::os::raw::c_char; 768usize],
    pub file: [::std::os::raw::c_char; 229usize],
    pub line_number: u64,
}
#[test]
fn bindgen_test_layout_rcutils_error_state_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_error_state_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_error_state_s>(),
        1008usize,
        concat!("Size of: ", stringify!(rcutils_error_state_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_error_state_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_error_state_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_error_state_s),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_error_state_s),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_number) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_error_state_s),
            "::",
            stringify!(line_number)
        )
    );
}
pub type rcutils_error_state_t = rcutils_error_state_s;
extern "C" {
    pub fn rcutils_initialize_error_handling_thread_local_storage(
        allocator: rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_set_error_state(
        error_string: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line_number: usize,
    );
}
extern "C" {
    pub fn rcutils_error_is_set() -> bool;
}
extern "C" {
    pub fn rcutils_get_error_state() -> *const rcutils_error_state_t;
}
extern "C" {
    pub fn rcutils_get_error_string() -> rcutils_error_string_t;
}
extern "C" {
    pub fn rcutils_reset_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_array_list_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_array_list_s {
    pub impl_: *mut rcutils_array_list_impl_s,
}
#[test]
fn bindgen_test_layout_rcutils_array_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_array_list_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_array_list_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcutils_array_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_array_list_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_array_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_array_list_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcutils_array_list_t = rcutils_array_list_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_array_list() -> rcutils_array_list_t;
}
extern "C" {
    pub fn rcutils_array_list_init(
        array_list: *mut rcutils_array_list_t,
        initial_capacity: usize,
        data_size: usize,
        allocator: *const rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_fini(array_list: *mut rcutils_array_list_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_add(
        array_list: *mut rcutils_array_list_t,
        data: *const ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_set(
        array_list: *mut rcutils_array_list_t,
        index: usize,
        data: *const ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_remove(
        array_list: *mut rcutils_array_list_t,
        index: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_get(
        array_list: *const rcutils_array_list_t,
        index: usize,
        data: *mut ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_array_list_get_size(
        array_list: *const rcutils_array_list_t,
        size: *mut usize,
    ) -> rcutils_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_char_array_s {
    pub buffer: *mut ::std::os::raw::c_char,
    pub owns_buffer: bool,
    pub buffer_length: usize,
    pub buffer_capacity: usize,
    pub allocator: rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rcutils_char_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_char_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_char_array_s>(),
        72usize,
        concat!("Size of: ", stringify!(rcutils_char_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_char_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_char_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_char_array_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owns_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_char_array_s),
            "::",
            stringify!(owns_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_char_array_s),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_capacity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_char_array_s),
            "::",
            stringify!(buffer_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_char_array_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcutils_char_array_t = rcutils_char_array_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_char_array() -> rcutils_char_array_t;
}
extern "C" {
    pub fn rcutils_char_array_init(
        char_array: *mut rcutils_char_array_t,
        buffer_capacity: usize,
        allocator: *const rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_fini(char_array: *mut rcutils_char_array_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_resize(
        char_array: *mut rcutils_char_array_t,
        new_size: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_expand_as_needed(
        char_array: *mut rcutils_char_array_t,
        new_size: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_vsprintf(
        char_array: *mut rcutils_char_array_t,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_strncat(
        char_array: *mut rcutils_char_array_t,
        src: *const ::std::os::raw::c_char,
        n: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_strcat(
        char_array: *mut rcutils_char_array_t,
        src: *const ::std::os::raw::c_char,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_memcpy(
        char_array: *mut rcutils_char_array_t,
        src: *const ::std::os::raw::c_char,
        n: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_char_array_strcpy(
        char_array: *mut rcutils_char_array_t,
        src: *const ::std::os::raw::c_char,
    ) -> rcutils_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_hash_map_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_hash_map_s {
    pub impl_: *mut rcutils_hash_map_impl_s,
}
#[test]
fn bindgen_test_layout_rcutils_hash_map_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_hash_map_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_hash_map_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcutils_hash_map_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_hash_map_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_hash_map_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_hash_map_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcutils_hash_map_t = rcutils_hash_map_s;
pub type rcutils_hash_map_key_hasher_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> usize>;
pub type rcutils_hash_map_key_cmp_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn rcutils_hash_map_string_hash_func(key_str: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn rcutils_hash_map_string_cmp_func(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_get_zero_initialized_hash_map() -> rcutils_hash_map_t;
}
extern "C" {
    pub fn rcutils_hash_map_init(
        hash_map: *mut rcutils_hash_map_t,
        initial_capacity: usize,
        key_size: usize,
        data_size: usize,
        key_hashing_func: rcutils_hash_map_key_hasher_t,
        key_cmp_func: rcutils_hash_map_key_cmp_t,
        allocator: *const rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_fini(hash_map: *mut rcutils_hash_map_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_get_capacity(
        hash_map: *const rcutils_hash_map_t,
        capacity: *mut usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_get_size(
        hash_map: *const rcutils_hash_map_t,
        size: *mut usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_set(
        hash_map: *mut rcutils_hash_map_t,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_unset(
        hash_map: *mut rcutils_hash_map_t,
        key: *const ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_key_exists(
        hash_map: *const rcutils_hash_map_t,
        key: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rcutils_hash_map_get(
        hash_map: *const rcutils_hash_map_t,
        key: *const ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_hash_map_get_next_key_and_data(
        hash_map: *const rcutils_hash_map_t,
        previous_key: *const ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_qsort(
        ptr: *mut ::std::os::raw::c_void,
        count: usize,
        size: usize,
        comp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> rcutils_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_array_s {
    pub size: usize,
    pub data: *mut *mut ::std::os::raw::c_char,
    pub allocator: rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rcutils_string_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_string_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_string_array_s>(),
        56usize,
        concat!("Size of: ", stringify!(rcutils_string_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_string_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_string_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_string_array_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_string_array_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_string_array_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcutils_string_array_t = rcutils_string_array_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_string_array() -> rcutils_string_array_t;
}
extern "C" {
    pub fn rcutils_string_array_init(
        string_array: *mut rcutils_string_array_t,
        size: usize,
        allocator: *const rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_array_fini(string_array: *mut rcutils_string_array_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_array_cmp(
        lhs: *const rcutils_string_array_t,
        rhs: *const rcutils_string_array_t,
        res: *mut ::std::os::raw::c_int,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_array_resize(
        string_array: *mut rcutils_string_array_t,
        new_size: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_array_sort_compare(
        lhs: *const ::std::os::raw::c_void,
        rhs: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_map_impl_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_string_map_s {
    pub impl_: *mut rcutils_string_map_impl_s,
}
#[test]
fn bindgen_test_layout_rcutils_string_map_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_string_map_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_string_map_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcutils_string_map_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_string_map_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_string_map_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_string_map_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcutils_string_map_t = rcutils_string_map_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_string_map() -> rcutils_string_map_t;
}
extern "C" {
    pub fn rcutils_string_map_init(
        string_map: *mut rcutils_string_map_t,
        initial_capacity: usize,
        allocator: rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_fini(string_map: *mut rcutils_string_map_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_get_capacity(
        string_map: *const rcutils_string_map_t,
        capacity: *mut usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_get_size(
        string_map: *const rcutils_string_map_t,
        size: *mut usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_reserve(
        string_map: *mut rcutils_string_map_t,
        capacity: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_clear(string_map: *mut rcutils_string_map_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_set(
        string_map: *mut rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_set_no_resize(
        string_map: *mut rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_unset(
        string_map: *mut rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_string_map_key_exists(
        string_map: *const rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn rcutils_string_map_key_existsn(
        string_map: *const rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
        key_length: usize,
    ) -> bool;
}
extern "C" {
    pub fn rcutils_string_map_get(
        string_map: *const rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcutils_string_map_getn(
        string_map: *const rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
        key_length: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcutils_string_map_get_next_key(
        string_map: *const rcutils_string_map_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcutils_string_map_copy(
        src_string_map: *const rcutils_string_map_t,
        dst_string_map: *mut rcutils_string_map_t,
    ) -> rcutils_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_uint8_array_s {
    pub buffer: *mut u8,
    pub buffer_length: usize,
    pub buffer_capacity: usize,
    pub allocator: rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rcutils_uint8_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_uint8_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_uint8_array_s>(),
        64usize,
        concat!("Size of: ", stringify!(rcutils_uint8_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_uint8_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_uint8_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_uint8_array_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_uint8_array_s),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_uint8_array_s),
            "::",
            stringify!(buffer_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_uint8_array_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcutils_uint8_array_t = rcutils_uint8_array_s;
extern "C" {
    pub fn rcutils_get_zero_initialized_uint8_array() -> rcutils_uint8_array_t;
}
extern "C" {
    pub fn rcutils_uint8_array_init(
        uint8_array: *mut rcutils_uint8_array_t,
        buffer_capacity: usize,
        allocator: *const rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_uint8_array_fini(uint8_array: *mut rcutils_uint8_array_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_uint8_array_resize(
        uint8_array: *mut rcutils_uint8_array_t,
        new_size: usize,
    ) -> rcutils_ret_t;
}
pub type rcutils_time_point_value_t = i64;
pub type rcutils_duration_value_t = i64;
extern "C" {
    pub fn rcutils_system_time_now(now: *mut rcutils_time_point_value_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_steady_time_now(now: *mut rcutils_time_point_value_t) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_time_point_value_as_nanoseconds_string(
        time_point: *const rcutils_time_point_value_t,
        str_: *mut ::std::os::raw::c_char,
        str_size: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_time_point_value_as_seconds_string(
        time_point: *const rcutils_time_point_value_t,
        str_: *mut ::std::os::raw::c_char,
        str_size: usize,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub static mut g_rcutils_logging_initialized: bool;
}
extern "C" {
    pub fn rcutils_logging_initialize_with_allocator(
        allocator: rcutils_allocator_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_logging_initialize() -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_logging_shutdown() -> rcutils_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcutils_log_location_s {
    pub function_name: *const ::std::os::raw::c_char,
    pub file_name: *const ::std::os::raw::c_char,
    pub line_number: usize,
}
#[test]
fn bindgen_test_layout_rcutils_log_location_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcutils_log_location_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcutils_log_location_s>(),
        24usize,
        concat!("Size of: ", stringify!(rcutils_log_location_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcutils_log_location_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcutils_log_location_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_log_location_s),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_log_location_s),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcutils_log_location_s),
            "::",
            stringify!(line_number)
        )
    );
}
pub type rcutils_log_location_t = rcutils_log_location_s;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_UNSET: RCUTILS_LOG_SEVERITY = 0;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_DEBUG: RCUTILS_LOG_SEVERITY = 10;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_INFO: RCUTILS_LOG_SEVERITY = 20;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_WARN: RCUTILS_LOG_SEVERITY = 30;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_ERROR: RCUTILS_LOG_SEVERITY = 40;
pub const RCUTILS_LOG_SEVERITY_RCUTILS_LOG_SEVERITY_FATAL: RCUTILS_LOG_SEVERITY = 50;
pub type RCUTILS_LOG_SEVERITY = ::std::os::raw::c_uint;
extern "C" {
    pub static g_rcutils_log_severity_names: [*const ::std::os::raw::c_char; 51usize];
}
extern "C" {
    pub fn rcutils_logging_severity_level_from_string(
        severity_string: *const ::std::os::raw::c_char,
        allocator: rcutils_allocator_t,
        severity: *mut ::std::os::raw::c_int,
    ) -> rcutils_ret_t;
}
pub type rcutils_logging_output_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rcutils_log_location_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: rcutils_time_point_value_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut va_list,
    ),
>;
extern "C" {
    pub static mut g_rcutils_logging_output_handler: rcutils_logging_output_handler_t;
}
extern "C" {
    pub fn rcutils_logging_get_output_handler() -> rcutils_logging_output_handler_t;
}
extern "C" {
    pub fn rcutils_logging_set_output_handler(function: rcutils_logging_output_handler_t);
}
extern "C" {
    pub fn rcutils_logging_format_message(
        location: *const rcutils_log_location_t,
        severity: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        timestamp: rcutils_time_point_value_t,
        msg: *const ::std::os::raw::c_char,
        logging_output: *mut rcutils_char_array_t,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub static mut g_rcutils_logging_default_logger_level: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_logging_get_default_logger_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_logging_set_default_logger_level(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rcutils_logging_get_logger_level(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_logging_get_logger_leveln(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_logging_set_logger_level(
        name: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_int,
    ) -> rcutils_ret_t;
}
extern "C" {
    pub fn rcutils_logging_logger_is_enabled_for(
        name: *const ::std::os::raw::c_char,
        severity: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn rcutils_logging_get_logger_effective_level(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcutils_log(
        location: *const rcutils_log_location_t,
        severity: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn rcutils_logging_console_output_handler(
        location: *const rcutils_log_location_t,
        severity: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        timestamp: rcutils_time_point_value_t,
        format: *const ::std::os::raw::c_char,
        args: *mut va_list,
    );
}
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_INVALID: rmw_qos_policy_kind_e = 1;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DURABILITY: rmw_qos_policy_kind_e = 2;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DEADLINE: rmw_qos_policy_kind_e = 4;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIVELINESS: rmw_qos_policy_kind_e = 8;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_RELIABILITY: rmw_qos_policy_kind_e = 16;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_HISTORY: rmw_qos_policy_kind_e = 32;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIFESPAN: rmw_qos_policy_kind_e = 64;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_DEPTH: rmw_qos_policy_kind_e = 128;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_LIVELINESS_LEASE_DURATION: rmw_qos_policy_kind_e =
    256;
pub const rmw_qos_policy_kind_e_RMW_QOS_POLICY_AVOID_ROS_NAMESPACE_CONVENTIONS:
    rmw_qos_policy_kind_e = 512;
pub type rmw_qos_policy_kind_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_policy_kind_e as rmw_qos_policy_kind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_qos_incompatible_event_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
    pub last_policy_kind: rmw_qos_policy_kind_t,
}
#[test]
fn bindgen_test_layout_rmw_qos_incompatible_event_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_qos_incompatible_event_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_qos_incompatible_event_status_s>(),
        12usize,
        concat!("Size of: ", stringify!(rmw_qos_incompatible_event_status_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_qos_incompatible_event_status_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rmw_qos_incompatible_event_status_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_incompatible_event_status_s),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count_change) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_incompatible_event_status_s),
            "::",
            stringify!(total_count_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_policy_kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_incompatible_event_status_s),
            "::",
            stringify!(last_policy_kind)
        )
    );
}
pub type rmw_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_s;
pub type rmw_requested_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_t;
pub type rmw_offered_qos_incompatible_event_status_t = rmw_qos_incompatible_event_status_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_liveliness_changed_status_s {
    pub alive_count: i32,
    pub not_alive_count: i32,
    pub alive_count_change: i32,
    pub not_alive_count_change: i32,
}
#[test]
fn bindgen_test_layout_rmw_liveliness_changed_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_liveliness_changed_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_liveliness_changed_status_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_liveliness_changed_status_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_liveliness_changed_status_s>(),
        4usize,
        concat!("Alignment of ", stringify!(rmw_liveliness_changed_status_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alive_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_changed_status_s),
            "::",
            stringify!(alive_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_alive_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_changed_status_s),
            "::",
            stringify!(not_alive_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alive_count_change) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_changed_status_s),
            "::",
            stringify!(alive_count_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_alive_count_change) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_changed_status_s),
            "::",
            stringify!(not_alive_count_change)
        )
    );
}
pub type rmw_liveliness_changed_status_t = rmw_liveliness_changed_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_liveliness_lost_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
#[test]
fn bindgen_test_layout_rmw_liveliness_lost_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_liveliness_lost_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_liveliness_lost_status_s>(),
        8usize,
        concat!("Size of: ", stringify!(rmw_liveliness_lost_status_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_liveliness_lost_status_s>(),
        4usize,
        concat!("Alignment of ", stringify!(rmw_liveliness_lost_status_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_lost_status_s),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count_change) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_liveliness_lost_status_s),
            "::",
            stringify!(total_count_change)
        )
    );
}
pub type rmw_liveliness_lost_status_t = rmw_liveliness_lost_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_lost_status_s {
    pub total_count: usize,
    pub total_count_change: usize,
}
#[test]
fn bindgen_test_layout_rmw_message_lost_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_message_lost_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_message_lost_status_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_message_lost_status_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_message_lost_status_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_message_lost_status_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_lost_status_s),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count_change) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_lost_status_s),
            "::",
            stringify!(total_count_change)
        )
    );
}
pub type rmw_message_lost_status_t = rmw_message_lost_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_offered_deadline_missed_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
#[test]
fn bindgen_test_layout_rmw_offered_deadline_missed_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_offered_deadline_missed_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_offered_deadline_missed_status_s>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rmw_offered_deadline_missed_status_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_offered_deadline_missed_status_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rmw_offered_deadline_missed_status_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_offered_deadline_missed_status_s),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count_change) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_offered_deadline_missed_status_s),
            "::",
            stringify!(total_count_change)
        )
    );
}
pub type rmw_offered_deadline_missed_status_t = rmw_offered_deadline_missed_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_requested_deadline_missed_status_s {
    pub total_count: i32,
    pub total_count_change: i32,
}
#[test]
fn bindgen_test_layout_rmw_requested_deadline_missed_status_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_requested_deadline_missed_status_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_requested_deadline_missed_status_s>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rmw_requested_deadline_missed_status_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_requested_deadline_missed_status_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rmw_requested_deadline_missed_status_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_requested_deadline_missed_status_s),
            "::",
            stringify!(total_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_count_change) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_requested_deadline_missed_status_s),
            "::",
            stringify!(total_count_change)
        )
    );
}
pub type rmw_requested_deadline_missed_status_t = rmw_requested_deadline_missed_status_s;
pub type rmw_serialized_message_t = rcutils_uint8_array_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_content_filter_options_s {
    pub filter_expression: *mut ::std::os::raw::c_char,
    pub expression_parameters: rcutils_string_array_t,
}
#[test]
fn bindgen_test_layout_rmw_subscription_content_filter_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_subscription_content_filter_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_subscription_content_filter_options_s>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(rmw_subscription_content_filter_options_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_subscription_content_filter_options_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rmw_subscription_content_filter_options_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_expression) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_content_filter_options_s),
            "::",
            stringify!(filter_expression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expression_parameters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_content_filter_options_s),
            "::",
            stringify!(expression_parameters)
        )
    );
}
pub type rmw_subscription_content_filter_options_t = rmw_subscription_content_filter_options_s;
extern "C" {
    pub fn rmw_get_zero_initialized_content_filter_options(
    ) -> rmw_subscription_content_filter_options_t;
}
extern "C" {
    pub fn rmw_subscription_content_filter_options_init(
        filter_expression: *const ::std::os::raw::c_char,
        expression_parameters_argc: usize,
        expression_parameter_argv: *mut *const ::std::os::raw::c_char,
        allocator: *const rcutils_allocator_t,
        options: *mut rmw_subscription_content_filter_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_content_filter_options_set(
        filter_expression: *const ::std::os::raw::c_char,
        expression_parameters_argc: usize,
        expression_parameter_argv: *mut *const ::std::os::raw::c_char,
        allocator: *const rcutils_allocator_t,
        options: *mut rmw_subscription_content_filter_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_content_filter_options_copy(
        src: *const rmw_subscription_content_filter_options_t,
        allocator: *const rcutils_allocator_t,
        dst: *mut rmw_subscription_content_filter_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_content_filter_options_fini(
        options: *mut rmw_subscription_content_filter_options_t,
        allocator: *const rcutils_allocator_t,
    ) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_time_s {
    pub sec: u64,
    pub nsec: u64,
}
#[test]
fn bindgen_test_layout_rmw_time_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_time_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_time_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_time_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_time_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_time_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_time_s),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_time_s),
            "::",
            stringify!(nsec)
        )
    );
}
pub type rmw_time_t = rmw_time_s;
pub type rmw_time_point_value_t = rcutils_time_point_value_t;
pub type rmw_duration_t = rcutils_duration_value_t;
extern "C" {
    pub fn rmw_time_equal(left: rmw_time_t, right: rmw_time_t) -> bool;
}
extern "C" {
    pub fn rmw_time_total_nsec(time: rmw_time_t) -> rmw_duration_t;
}
extern "C" {
    pub fn rmw_time_from_nsec(nanoseconds: rmw_duration_t) -> rmw_time_t;
}
extern "C" {
    pub fn rmw_time_normalize(time: rmw_time_t) -> rmw_time_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_node_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub namespace_: *const ::std::os::raw::c_char,
    pub context: *mut rmw_context_t,
}
#[test]
fn bindgen_test_layout_rmw_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_node_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_node_s>(),
        40usize,
        concat!("Size of: ", stringify!(rmw_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_node_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_node_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_node_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namespace_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_node_s),
            "::",
            stringify!(namespace_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_node_s),
            "::",
            stringify!(context)
        )
    );
}
pub type rmw_node_t = rmw_node_s;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_INVALID: rmw_endpoint_type_e = 0;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_PUBLISHER: rmw_endpoint_type_e = 1;
pub const rmw_endpoint_type_e_RMW_ENDPOINT_SUBSCRIPTION: rmw_endpoint_type_e = 2;
pub type rmw_endpoint_type_e = ::std::os::raw::c_uint;
pub use self::rmw_endpoint_type_e as rmw_endpoint_type_t;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_NOT_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 0 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_STRICTLY_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 1 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_OPTIONALLY_REQUIRED : rmw_unique_network_flow_endpoints_requirement_e = 2 ;
pub const rmw_unique_network_flow_endpoints_requirement_e_RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_SYSTEM_DEFAULT : rmw_unique_network_flow_endpoints_requirement_e = 3 ;
pub type rmw_unique_network_flow_endpoints_requirement_e = ::std::os::raw::c_uint;
pub use self::rmw_unique_network_flow_endpoints_requirement_e as rmw_unique_network_flow_endpoints_requirement_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_options_s {
    pub rmw_specific_publisher_payload: *mut ::std::os::raw::c_void,
    pub require_unique_network_flow_endpoints: rmw_unique_network_flow_endpoints_requirement_t,
}
#[test]
fn bindgen_test_layout_rmw_publisher_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_publisher_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_publisher_options_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_publisher_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_publisher_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_publisher_options_s))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rmw_specific_publisher_payload) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_options_s),
            "::",
            stringify!(rmw_specific_publisher_payload)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).require_unique_network_flow_endpoints) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_options_s),
            "::",
            stringify!(require_unique_network_flow_endpoints)
        )
    );
}
pub type rmw_publisher_options_t = rmw_publisher_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub topic_name: *const ::std::os::raw::c_char,
    pub options: rmw_publisher_options_t,
    pub can_loan_messages: bool,
}
#[test]
fn bindgen_test_layout_rmw_publisher_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_publisher_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_publisher_s>(),
        48usize,
        concat!("Size of: ", stringify!(rmw_publisher_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_publisher_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_publisher_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topic_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_s),
            "::",
            stringify!(topic_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_s),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_loan_messages) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_s),
            "::",
            stringify!(can_loan_messages)
        )
    );
}
pub type rmw_publisher_t = rmw_publisher_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_options_s {
    pub rmw_specific_subscription_payload: *mut ::std::os::raw::c_void,
    pub ignore_local_publications: bool,
    pub require_unique_network_flow_endpoints: rmw_unique_network_flow_endpoints_requirement_t,
    pub content_filter_options: *mut rmw_subscription_content_filter_options_t,
}
#[test]
fn bindgen_test_layout_rmw_subscription_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_subscription_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_subscription_options_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_subscription_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_subscription_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_subscription_options_s))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rmw_specific_subscription_payload) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_options_s),
            "::",
            stringify!(rmw_specific_subscription_payload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_local_publications) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_options_s),
            "::",
            stringify!(ignore_local_publications)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).require_unique_network_flow_endpoints) as usize
                - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_options_s),
            "::",
            stringify!(require_unique_network_flow_endpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_filter_options) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_options_s),
            "::",
            stringify!(content_filter_options)
        )
    );
}
pub type rmw_subscription_options_t = rmw_subscription_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub topic_name: *const ::std::os::raw::c_char,
    pub options: rmw_subscription_options_t,
    pub can_loan_messages: bool,
    pub is_cft_enabled: bool,
}
#[test]
fn bindgen_test_layout_rmw_subscription_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_subscription_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_subscription_s>(),
        56usize,
        concat!("Size of: ", stringify!(rmw_subscription_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_subscription_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_subscription_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topic_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(topic_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_loan_messages) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(can_loan_messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_cft_enabled) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_s),
            "::",
            stringify!(is_cft_enabled)
        )
    );
}
pub type rmw_subscription_t = rmw_subscription_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_service_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub service_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rmw_service_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_service_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_service_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_service_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_service_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_service_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_s),
            "::",
            stringify!(service_name)
        )
    );
}
pub type rmw_service_t = rmw_service_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_client_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub service_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rmw_client_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_client_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_client_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_client_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_client_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_client_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_client_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_client_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_client_s),
            "::",
            stringify!(service_name)
        )
    );
}
pub type rmw_client_t = rmw_client_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_guard_condition_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub context: *mut rmw_context_t,
}
#[test]
fn bindgen_test_layout_rmw_guard_condition_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_guard_condition_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_guard_condition_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_guard_condition_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_guard_condition_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_guard_condition_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_guard_condition_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_guard_condition_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_guard_condition_s),
            "::",
            stringify!(context)
        )
    );
}
pub type rmw_guard_condition_t = rmw_guard_condition_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_publisher_allocation_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_publisher_allocation_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_publisher_allocation_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_publisher_allocation_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_publisher_allocation_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_publisher_allocation_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_publisher_allocation_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_allocation_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_publisher_allocation_s),
            "::",
            stringify!(data)
        )
    );
}
pub type rmw_publisher_allocation_t = rmw_publisher_allocation_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscription_allocation_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_subscription_allocation_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_subscription_allocation_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_subscription_allocation_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_subscription_allocation_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_subscription_allocation_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_subscription_allocation_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_allocation_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscription_allocation_s),
            "::",
            stringify!(data)
        )
    );
}
pub type rmw_subscription_allocation_t = rmw_subscription_allocation_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_subscriptions_s {
    pub subscriber_count: usize,
    pub subscribers: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_subscriptions_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_subscriptions_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_subscriptions_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_subscriptions_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_subscriptions_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_subscriptions_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscriber_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscriptions_s),
            "::",
            stringify!(subscriber_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscribers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_subscriptions_s),
            "::",
            stringify!(subscribers)
        )
    );
}
pub type rmw_subscriptions_t = rmw_subscriptions_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_services_s {
    pub service_count: usize,
    pub services: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_services_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_services_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_services_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_services_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_services_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_services_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_services_s),
            "::",
            stringify!(service_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).services) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_services_s),
            "::",
            stringify!(services)
        )
    );
}
pub type rmw_services_t = rmw_services_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_clients_s {
    pub client_count: usize,
    pub clients: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_clients_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_clients_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_clients_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_clients_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_clients_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_clients_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_clients_s),
            "::",
            stringify!(client_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clients) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_clients_s),
            "::",
            stringify!(clients)
        )
    );
}
pub type rmw_clients_t = rmw_clients_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_events_s {
    pub event_count: usize,
    pub events: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_events_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_events_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_events_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_events_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_events_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_events_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_events_s),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_events_s),
            "::",
            stringify!(events)
        )
    );
}
pub type rmw_events_t = rmw_events_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_guard_conditions_s {
    pub guard_condition_count: usize,
    pub guard_conditions: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_guard_conditions_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_guard_conditions_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_guard_conditions_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_guard_conditions_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_guard_conditions_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_guard_conditions_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard_condition_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_guard_conditions_s),
            "::",
            stringify!(guard_condition_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard_conditions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_guard_conditions_s),
            "::",
            stringify!(guard_conditions)
        )
    );
}
pub type rmw_guard_conditions_t = rmw_guard_conditions_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_wait_set_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub guard_conditions: *mut rmw_guard_conditions_t,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rmw_wait_set_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_wait_set_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_wait_set_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_wait_set_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_wait_set_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_wait_set_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_wait_set_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard_conditions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_wait_set_s),
            "::",
            stringify!(guard_conditions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_wait_set_s),
            "::",
            stringify!(data)
        )
    );
}
pub type rmw_wait_set_t = rmw_wait_set_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_request_id_s {
    pub writer_guid: [i8; 16usize],
    pub sequence_number: i64,
}
#[test]
fn bindgen_test_layout_rmw_request_id_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_request_id_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_request_id_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_request_id_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_request_id_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_request_id_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writer_guid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_request_id_s),
            "::",
            stringify!(writer_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_request_id_s),
            "::",
            stringify!(sequence_number)
        )
    );
}
pub type rmw_request_id_t = rmw_request_id_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_service_info_s {
    pub source_timestamp: rmw_time_point_value_t,
    pub received_timestamp: rmw_time_point_value_t,
    pub request_id: rmw_request_id_t,
}
#[test]
fn bindgen_test_layout_rmw_service_info_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_service_info_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_service_info_s>(),
        40usize,
        concat!("Size of: ", stringify!(rmw_service_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_service_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_service_info_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_info_s),
            "::",
            stringify!(source_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_info_s),
            "::",
            stringify!(received_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_service_info_s),
            "::",
            stringify!(request_id)
        )
    );
}
pub type rmw_service_info_t = rmw_service_info_s;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_SYSTEM_DEFAULT:
    rmw_qos_reliability_policy_e = 0;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_RELIABLE:
    rmw_qos_reliability_policy_e = 1;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT:
    rmw_qos_reliability_policy_e = 2;
pub const rmw_qos_reliability_policy_e_RMW_QOS_POLICY_RELIABILITY_UNKNOWN:
    rmw_qos_reliability_policy_e = 3;
pub type rmw_qos_reliability_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_reliability_policy_e as rmw_qos_reliability_policy_t;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_SYSTEM_DEFAULT: rmw_qos_history_policy_e =
    0;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_KEEP_LAST: rmw_qos_history_policy_e = 1;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_KEEP_ALL: rmw_qos_history_policy_e = 2;
pub const rmw_qos_history_policy_e_RMW_QOS_POLICY_HISTORY_UNKNOWN: rmw_qos_history_policy_e = 3;
pub type rmw_qos_history_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_history_policy_e as rmw_qos_history_policy_t;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT:
    rmw_qos_durability_policy_e = 0;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL:
    rmw_qos_durability_policy_e = 1;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_VOLATILE:
    rmw_qos_durability_policy_e = 2;
pub const rmw_qos_durability_policy_e_RMW_QOS_POLICY_DURABILITY_UNKNOWN:
    rmw_qos_durability_policy_e = 3;
pub type rmw_qos_durability_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_durability_policy_e as rmw_qos_durability_policy_t;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT:
    rmw_qos_liveliness_policy_e = 0;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_AUTOMATIC:
    rmw_qos_liveliness_policy_e = 1;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_NODE:
    rmw_qos_liveliness_policy_e = 2;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC:
    rmw_qos_liveliness_policy_e = 3;
pub const rmw_qos_liveliness_policy_e_RMW_QOS_POLICY_LIVELINESS_UNKNOWN:
    rmw_qos_liveliness_policy_e = 4;
pub type rmw_qos_liveliness_policy_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_liveliness_policy_e as rmw_qos_liveliness_policy_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_qos_profile_s {
    pub history: rmw_qos_history_policy_e,
    pub depth: usize,
    pub reliability: rmw_qos_reliability_policy_e,
    pub durability: rmw_qos_durability_policy_e,
    pub deadline: rmw_time_s,
    pub lifespan: rmw_time_s,
    pub liveliness: rmw_qos_liveliness_policy_e,
    pub liveliness_lease_duration: rmw_time_s,
    pub avoid_ros_namespace_conventions: bool,
}
#[test]
fn bindgen_test_layout_rmw_qos_profile_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_qos_profile_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_qos_profile_s>(),
        88usize,
        concat!("Size of: ", stringify!(rmw_qos_profile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_qos_profile_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_qos_profile_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).history) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reliability) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(reliability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).durability) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(durability)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(deadline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifespan) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(lifespan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liveliness) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(liveliness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).liveliness_lease_duration) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(liveliness_lease_duration)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).avoid_ros_namespace_conventions) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_qos_profile_s),
            "::",
            stringify!(avoid_ros_namespace_conventions)
        )
    );
}
pub type rmw_qos_profile_t = rmw_qos_profile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_gid_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_rmw_gid_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_gid_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_gid_s>(),
        32usize,
        concat!("Size of: ", stringify!(rmw_gid_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_gid_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_gid_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_gid_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_gid_s),
            "::",
            stringify!(data)
        )
    );
}
pub type rmw_gid_t = rmw_gid_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_info_s {
    pub source_timestamp: rmw_time_point_value_t,
    pub received_timestamp: rmw_time_point_value_t,
    pub publication_sequence_number: u64,
    pub reception_sequence_number: u64,
    pub publisher_gid: rmw_gid_t,
    pub from_intra_process: bool,
}
#[test]
fn bindgen_test_layout_rmw_message_info_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_message_info_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_message_info_s>(),
        72usize,
        concat!("Size of: ", stringify!(rmw_message_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_message_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_message_info_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(source_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(received_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publication_sequence_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(publication_sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reception_sequence_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(reception_sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publisher_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(publisher_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_intra_process) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_s),
            "::",
            stringify!(from_intra_process)
        )
    );
}
pub type rmw_message_info_t = rmw_message_info_s;
extern "C" {
    pub fn rmw_get_zero_initialized_message_info() -> rmw_message_info_t;
}
pub const RMW_QOS_POLICY_DEPTH_SYSTEM_DEFAULT: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_DEBUG: rmw_log_severity_t = 10;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_INFO: rmw_log_severity_t = 20;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_WARN: rmw_log_severity_t = 30;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_ERROR: rmw_log_severity_t = 40;
pub const rmw_log_severity_t_RMW_LOG_SEVERITY_FATAL: rmw_log_severity_t = 50;
pub type rmw_log_severity_t = ::std::os::raw::c_uint;
pub type rcl_ret_t = rmw_ret_t;
pub type rcl_serialized_message_t = rmw_serialized_message_t;
pub use self::RCUTILS_LOG_SEVERITY as rcl_log_severity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_logger_setting_s {
    pub name: *const ::std::os::raw::c_char,
    pub level: rcl_log_severity_t,
}
#[test]
fn bindgen_test_layout_rcl_logger_setting_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_logger_setting_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_logger_setting_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_logger_setting_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_logger_setting_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_logger_setting_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_logger_setting_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_logger_setting_s),
            "::",
            stringify!(level)
        )
    );
}
pub type rcl_logger_setting_t = rcl_logger_setting_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_log_levels_s {
    pub default_logger_level: rcl_log_severity_t,
    pub logger_settings: *mut rcl_logger_setting_t,
    pub num_logger_settings: usize,
    pub capacity_logger_settings: usize,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_log_levels_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_log_levels_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_log_levels_s>(),
        72usize,
        concat!("Size of: ", stringify!(rcl_log_levels_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_log_levels_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_log_levels_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_logger_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_log_levels_s),
            "::",
            stringify!(default_logger_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logger_settings) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_log_levels_s),
            "::",
            stringify!(logger_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_logger_settings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_log_levels_s),
            "::",
            stringify!(num_logger_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity_logger_settings) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_log_levels_s),
            "::",
            stringify!(capacity_logger_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_log_levels_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_log_levels_t = rcl_log_levels_s;
extern "C" {
    pub fn rcl_get_zero_initialized_log_levels() -> rcl_log_levels_t;
}
extern "C" {
    pub fn rcl_log_levels_init(
        log_levels: *mut rcl_log_levels_t,
        allocator: *const rcl_allocator_t,
        logger_count: usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_log_levels_copy(
        src: *const rcl_log_levels_t,
        dst: *mut rcl_log_levels_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_log_levels_fini(log_levels: *mut rcl_log_levels_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_log_levels_shrink_to_size(log_levels: *mut rcl_log_levels_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_log_levels_add_logger_setting(
        log_levels: *mut rcl_log_levels_t,
        logger_name: *const ::std::os::raw::c_char,
        log_level: rcl_log_severity_t,
    ) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_bool_array_s {
    pub values: *mut bool,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rcl_bool_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_bool_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_bool_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_bool_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_bool_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_bool_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_bool_array_s),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_bool_array_s),
            "::",
            stringify!(size)
        )
    );
}
pub type rcl_bool_array_t = rcl_bool_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_int64_array_s {
    pub values: *mut i64,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rcl_int64_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_int64_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_int64_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_int64_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_int64_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_int64_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_int64_array_s),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_int64_array_s),
            "::",
            stringify!(size)
        )
    );
}
pub type rcl_int64_array_t = rcl_int64_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_double_array_s {
    pub values: *mut f64,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rcl_double_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_double_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_double_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_double_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_double_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_double_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_double_array_s),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_double_array_s),
            "::",
            stringify!(size)
        )
    );
}
pub type rcl_double_array_t = rcl_double_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_byte_array_s {
    pub values: *mut u8,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_rcl_byte_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_byte_array_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_byte_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_byte_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_byte_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_byte_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_byte_array_s),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_byte_array_s),
            "::",
            stringify!(size)
        )
    );
}
pub type rcl_byte_array_t = rcl_byte_array_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_variant_s {
    pub bool_value: *mut bool,
    pub integer_value: *mut i64,
    pub double_value: *mut f64,
    pub string_value: *mut ::std::os::raw::c_char,
    pub byte_array_value: *mut rcl_byte_array_t,
    pub bool_array_value: *mut rcl_bool_array_t,
    pub integer_array_value: *mut rcl_int64_array_t,
    pub double_array_value: *mut rcl_double_array_t,
    pub string_array_value: *mut rcutils_string_array_t,
}
#[test]
fn bindgen_test_layout_rcl_variant_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_variant_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_variant_s>(),
        72usize,
        concat!("Size of: ", stringify!(rcl_variant_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_variant_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_variant_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bool_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(bool_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(integer_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(double_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_array_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(byte_array_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bool_array_value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(bool_array_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer_array_value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(integer_array_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).double_array_value) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(double_array_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_array_value) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_variant_s),
            "::",
            stringify!(string_array_value)
        )
    );
}
pub type rcl_variant_t = rcl_variant_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_node_params_s {
    pub parameter_names: *mut *mut ::std::os::raw::c_char,
    pub parameter_values: *mut rcl_variant_t,
    pub num_params: usize,
    pub capacity_params: usize,
}
#[test]
fn bindgen_test_layout_rcl_node_params_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_node_params_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_node_params_s>(),
        32usize,
        concat!("Size of: ", stringify!(rcl_node_params_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_node_params_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_node_params_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_params_s),
            "::",
            stringify!(parameter_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_values) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_params_s),
            "::",
            stringify!(parameter_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_params) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_params_s),
            "::",
            stringify!(num_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity_params) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_params_s),
            "::",
            stringify!(capacity_params)
        )
    );
}
pub type rcl_node_params_t = rcl_node_params_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_params_s {
    pub node_names: *mut *mut ::std::os::raw::c_char,
    pub params: *mut rcl_node_params_t,
    pub num_nodes: usize,
    pub capacity_nodes: usize,
    pub allocator: rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_params_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_params_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_params_s>(),
        72usize,
        concat!("Size of: ", stringify!(rcl_params_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_params_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_params_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_params_s),
            "::",
            stringify!(node_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_params_s),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_params_s),
            "::",
            stringify!(num_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity_nodes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_params_s),
            "::",
            stringify!(capacity_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_params_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_params_t = rcl_params_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_arguments_impl_s {
    _unused: [u8; 0],
}
pub type rcl_arguments_impl_t = rcl_arguments_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_arguments_s {
    pub impl_: *mut rcl_arguments_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_arguments_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_arguments_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_arguments_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_arguments_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_arguments_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_arguments_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_arguments_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_arguments_t = rcl_arguments_s;
extern "C" {
    pub fn rcl_get_zero_initialized_arguments() -> rcl_arguments_t;
}
extern "C" {
    pub fn rcl_parse_arguments(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        allocator: rcl_allocator_t,
        args_output: *mut rcl_arguments_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_get_count_unparsed(args: *const rcl_arguments_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcl_arguments_get_unparsed(
        args: *const rcl_arguments_t,
        allocator: rcl_allocator_t,
        output_unparsed_indices: *mut *mut ::std::os::raw::c_int,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_get_count_unparsed_ros(
        args: *const rcl_arguments_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcl_arguments_get_unparsed_ros(
        args: *const rcl_arguments_t,
        allocator: rcl_allocator_t,
        output_unparsed_ros_indices: *mut *mut ::std::os::raw::c_int,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_get_param_files_count(
        args: *const rcl_arguments_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcl_arguments_get_param_files(
        arguments: *const rcl_arguments_t,
        allocator: rcl_allocator_t,
        parameter_files: *mut *mut *mut ::std::os::raw::c_char,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_get_param_overrides(
        arguments: *const rcl_arguments_t,
        parameter_overrides: *mut *mut rcl_params_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_remove_ros_arguments(
        argv: *const *const ::std::os::raw::c_char,
        args: *const rcl_arguments_t,
        allocator: rcl_allocator_t,
        nonros_argc: *mut ::std::os::raw::c_int,
        nonros_argv: *mut *mut *const ::std::os::raw::c_char,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_get_log_levels(
        arguments: *const rcl_arguments_t,
        log_levels: *mut rcl_log_levels_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_copy(
        args: *const rcl_arguments_t,
        args_out: *mut rcl_arguments_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_arguments_fini(args: *mut rcl_arguments_t) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_init_options_impl_s {
    _unused: [u8; 0],
}
pub type rcl_init_options_impl_t = rcl_init_options_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_init_options_s {
    pub impl_: *mut rcl_init_options_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_init_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_init_options_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_init_options_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_init_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_init_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_init_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_init_options_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_init_options_t = rcl_init_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_init_options() -> rcl_init_options_t;
}
extern "C" {
    pub fn rcl_init_options_init(
        init_options: *mut rcl_init_options_t,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_init_options_copy(
        src: *const rcl_init_options_t,
        dst: *mut rcl_init_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_init_options_fini(init_options: *mut rcl_init_options_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_init_options_get_domain_id(
        init_options: *const rcl_init_options_t,
        domain_id: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_init_options_set_domain_id(
        init_options: *mut rcl_init_options_t,
        domain_id: usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_init_options_get_rmw_init_options(
        init_options: *mut rcl_init_options_t,
    ) -> *mut rmw_init_options_t;
}
extern "C" {
    pub fn rcl_init_options_get_allocator(
        init_options: *const rcl_init_options_t,
    ) -> *const rcl_allocator_t;
}
pub type rcl_context_instance_id_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_context_impl_s {
    _unused: [u8; 0],
}
pub type rcl_context_impl_t = rcl_context_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_context_s {
    pub global_arguments: rcl_arguments_t,
    pub impl_: *mut rcl_context_impl_t,
    pub instance_id_storage: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_rcl_context_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_context_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_context_s>(),
        24usize,
        concat!("Size of: ", stringify!(rcl_context_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_context_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_context_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_arguments) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_context_s),
            "::",
            stringify!(global_arguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_context_s),
            "::",
            stringify!(impl_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_id_storage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_context_s),
            "::",
            stringify!(instance_id_storage)
        )
    );
}
pub type rcl_context_t = rcl_context_s;
extern "C" {
    pub fn rcl_get_zero_initialized_context() -> rcl_context_t;
}
extern "C" {
    pub fn rcl_context_fini(context: *mut rcl_context_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_context_get_init_options(context: *const rcl_context_t)
        -> *const rcl_init_options_t;
}
extern "C" {
    pub fn rcl_context_get_instance_id(context: *const rcl_context_t) -> rcl_context_instance_id_t;
}
extern "C" {
    pub fn rcl_context_get_domain_id(
        context: *mut rcl_context_t,
        domain_id: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_context_is_valid(context: *const rcl_context_t) -> bool;
}
extern "C" {
    pub fn rcl_context_get_rmw_context(context: *mut rcl_context_t) -> *mut rmw_context_t;
}
extern "C" {
    pub fn rcl_init(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        options: *const rcl_init_options_t,
        context: *mut rcl_context_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_shutdown(context: *mut rcl_context_t) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_guard_condition_impl_s {
    _unused: [u8; 0],
}
pub type rcl_guard_condition_impl_t = rcl_guard_condition_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_guard_condition_s {
    pub context: *mut rcl_context_t,
    pub impl_: *mut rcl_guard_condition_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_guard_condition_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_guard_condition_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_guard_condition_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_guard_condition_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_guard_condition_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_guard_condition_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_guard_condition_s),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_guard_condition_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_guard_condition_t = rcl_guard_condition_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_guard_condition_options_s {
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_guard_condition_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_guard_condition_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_guard_condition_options_s>(),
        40usize,
        concat!("Size of: ", stringify!(rcl_guard_condition_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_guard_condition_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_guard_condition_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_guard_condition_options_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_guard_condition_options_t = rcl_guard_condition_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_guard_condition() -> rcl_guard_condition_t;
}
extern "C" {
    pub fn rcl_guard_condition_init(
        guard_condition: *mut rcl_guard_condition_t,
        context: *mut rcl_context_t,
        options: rcl_guard_condition_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_guard_condition_init_from_rmw(
        guard_condition: *mut rcl_guard_condition_t,
        rmw_guard_condition: *const rmw_guard_condition_t,
        context: *mut rcl_context_t,
        options: rcl_guard_condition_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_guard_condition_fini(guard_condition: *mut rcl_guard_condition_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_guard_condition_get_default_options() -> rcl_guard_condition_options_t;
}
extern "C" {
    pub fn rcl_trigger_guard_condition(guard_condition: *mut rcl_guard_condition_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_guard_condition_get_options(
        guard_condition: *const rcl_guard_condition_t,
    ) -> *const rcl_guard_condition_options_t;
}
extern "C" {
    pub fn rcl_guard_condition_get_rmw_handle(
        guard_condition: *const rcl_guard_condition_t,
    ) -> *mut rmw_guard_condition_t;
}
extern "C" {
    pub static RCL_DOMAIN_ID_ENV_VAR: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_get_default_domain_id(domain_id: *mut usize) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_node_options_s {
    pub allocator: rcl_allocator_t,
    pub use_global_arguments: bool,
    pub arguments: rcl_arguments_t,
    pub enable_rosout: bool,
    pub rosout_qos: rmw_qos_profile_t,
}
#[test]
fn bindgen_test_layout_rcl_node_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_node_options_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_node_options_s>(),
        152usize,
        concat!("Size of: ", stringify!(rcl_node_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_node_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_node_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_options_s),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_global_arguments) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_options_s),
            "::",
            stringify!(use_global_arguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arguments) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_options_s),
            "::",
            stringify!(arguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_rosout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_options_s),
            "::",
            stringify!(enable_rosout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rosout_qos) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_options_s),
            "::",
            stringify!(rosout_qos)
        )
    );
}
pub type rcl_node_options_t = rcl_node_options_s;
extern "C" {
    pub fn rcl_node_get_default_options() -> rcl_node_options_t;
}
extern "C" {
    pub fn rcl_node_options_copy(
        options: *const rcl_node_options_t,
        options_out: *mut rcl_node_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_node_options_fini(options: *mut rcl_node_options_t) -> rcl_ret_t;
}
extern "C" {
    pub static RCL_DISABLE_LOANED_MESSAGES_ENV_VAR: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_node_impl_s {
    _unused: [u8; 0],
}
pub type rcl_node_impl_t = rcl_node_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_node_s {
    pub context: *mut rcl_context_t,
    pub impl_: *mut rcl_node_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_node_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_node_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_s),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_node_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_node_t = rcl_node_s;
extern "C" {
    pub fn rcl_get_zero_initialized_node() -> rcl_node_t;
}
extern "C" {
    pub fn rcl_node_init(
        node: *mut rcl_node_t,
        name: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
        context: *mut rcl_context_t,
        options: *const rcl_node_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_node_fini(node: *mut rcl_node_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_node_is_valid(node: *const rcl_node_t) -> bool;
}
extern "C" {
    pub fn rcl_node_is_valid_except_context(node: *const rcl_node_t) -> bool;
}
extern "C" {
    pub fn rcl_node_get_name(node: *const rcl_node_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_node_get_namespace(node: *const rcl_node_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_node_get_fully_qualified_name(
        node: *const rcl_node_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_node_get_options(node: *const rcl_node_t) -> *const rcl_node_options_t;
}
extern "C" {
    pub fn rcl_node_get_domain_id(node: *const rcl_node_t, domain_id: *mut usize) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_node_get_rmw_handle(node: *const rcl_node_t) -> *mut rmw_node_t;
}
extern "C" {
    pub fn rcl_node_get_rcl_instance_id(node: *const rcl_node_t) -> u64;
}
extern "C" {
    pub fn rcl_node_get_graph_guard_condition(
        node: *const rcl_node_t,
    ) -> *const rcl_guard_condition_t;
}
extern "C" {
    pub fn rcl_node_get_logger_name(node: *const rcl_node_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_node_resolve_name(
        node: *const rcl_node_t,
        input_name: *const ::std::os::raw::c_char,
        allocator: rcl_allocator_t,
        is_service: bool,
        only_expand: bool,
        output_name: *mut *mut ::std::os::raw::c_char,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_disable_loaned_message(disable_loaned_message: *mut bool) -> rcl_ret_t;
}
pub type rosidl_message_typesupport_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_message_type_support_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_message_type_support_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_message_type_support_t {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_message_typesupport_handle_function,
}
#[test]
fn bindgen_test_layout_rosidl_message_type_support_t() {
    const UNINIT: ::std::mem::MaybeUninit<rosidl_message_type_support_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rosidl_message_type_support_t>(),
        24usize,
        concat!("Size of: ", stringify!(rosidl_message_type_support_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rosidl_message_type_support_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rosidl_message_type_support_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesupport_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_message_type_support_t),
            "::",
            stringify!(typesupport_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_message_type_support_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_message_type_support_t),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn get_message_typesupport_handle(
        handle: *const rosidl_message_type_support_t,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_message_type_support_t;
}
extern "C" {
    pub fn get_message_typesupport_handle_function(
        handle: *const rosidl_message_type_support_t,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_message_type_support_t;
}
pub type rcl_time_point_value_t = rcutils_time_point_value_t;
pub type rcl_duration_value_t = rcutils_duration_value_t;
pub const rcl_clock_type_e_RCL_CLOCK_UNINITIALIZED: rcl_clock_type_e = 0;
pub const rcl_clock_type_e_RCL_ROS_TIME: rcl_clock_type_e = 1;
pub const rcl_clock_type_e_RCL_SYSTEM_TIME: rcl_clock_type_e = 2;
pub const rcl_clock_type_e_RCL_STEADY_TIME: rcl_clock_type_e = 3;
pub type rcl_clock_type_e = ::std::os::raw::c_uint;
pub use self::rcl_clock_type_e as rcl_clock_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_duration_s {
    pub nanoseconds: rcl_duration_value_t,
}
#[test]
fn bindgen_test_layout_rcl_duration_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_duration_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_duration_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_duration_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_duration_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_duration_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nanoseconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_duration_s),
            "::",
            stringify!(nanoseconds)
        )
    );
}
pub type rcl_duration_t = rcl_duration_s;
pub const rcl_clock_change_e_RCL_ROS_TIME_NO_CHANGE: rcl_clock_change_e = 1;
pub const rcl_clock_change_e_RCL_ROS_TIME_ACTIVATED: rcl_clock_change_e = 2;
pub const rcl_clock_change_e_RCL_ROS_TIME_DEACTIVATED: rcl_clock_change_e = 3;
pub const rcl_clock_change_e_RCL_SYSTEM_TIME_NO_CHANGE: rcl_clock_change_e = 4;
pub type rcl_clock_change_e = ::std::os::raw::c_uint;
pub use self::rcl_clock_change_e as rcl_clock_change_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_time_jump_s {
    pub clock_change: rcl_clock_change_t,
    pub delta: rcl_duration_t,
}
#[test]
fn bindgen_test_layout_rcl_time_jump_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_time_jump_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_time_jump_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_time_jump_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_time_jump_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_time_jump_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock_change) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_time_jump_s),
            "::",
            stringify!(clock_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_time_jump_s),
            "::",
            stringify!(delta)
        )
    );
}
pub type rcl_time_jump_t = rcl_time_jump_s;
pub type rcl_jump_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        time_jump: *const rcl_time_jump_t,
        before_jump: bool,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_jump_threshold_s {
    pub on_clock_change: bool,
    pub min_forward: rcl_duration_t,
    pub min_backward: rcl_duration_t,
}
#[test]
fn bindgen_test_layout_rcl_jump_threshold_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_jump_threshold_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_jump_threshold_s>(),
        24usize,
        concat!("Size of: ", stringify!(rcl_jump_threshold_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_jump_threshold_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_jump_threshold_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_clock_change) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_threshold_s),
            "::",
            stringify!(on_clock_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_forward) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_threshold_s),
            "::",
            stringify!(min_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_backward) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_threshold_s),
            "::",
            stringify!(min_backward)
        )
    );
}
pub type rcl_jump_threshold_t = rcl_jump_threshold_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_jump_callback_info_s {
    pub callback: rcl_jump_callback_t,
    pub threshold: rcl_jump_threshold_t,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rcl_jump_callback_info_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_jump_callback_info_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_jump_callback_info_s>(),
        40usize,
        concat!("Size of: ", stringify!(rcl_jump_callback_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_jump_callback_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_jump_callback_info_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_callback_info_s),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_callback_info_s),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_jump_callback_info_s),
            "::",
            stringify!(user_data)
        )
    );
}
pub type rcl_jump_callback_info_t = rcl_jump_callback_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_clock_s {
    pub type_: rcl_clock_type_t,
    pub jump_callbacks: *mut rcl_jump_callback_info_t,
    pub num_jump_callbacks: usize,
    pub get_now: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            now: *mut rcl_time_point_value_t,
        ) -> rcl_ret_t,
    >,
    pub data: *mut ::std::os::raw::c_void,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_clock_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_clock_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_clock_s>(),
        80usize,
        concat!("Size of: ", stringify!(rcl_clock_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_clock_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_clock_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jump_callbacks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(jump_callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_jump_callbacks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(num_jump_callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_now) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(get_now)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_clock_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_clock_t = rcl_clock_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_time_point_s {
    pub nanoseconds: rcl_time_point_value_t,
    pub clock_type: rcl_clock_type_t,
}
#[test]
fn bindgen_test_layout_rcl_time_point_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_time_point_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_time_point_s>(),
        16usize,
        concat!("Size of: ", stringify!(rcl_time_point_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_time_point_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_time_point_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nanoseconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_time_point_s),
            "::",
            stringify!(nanoseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_time_point_s),
            "::",
            stringify!(clock_type)
        )
    );
}
pub type rcl_time_point_t = rcl_time_point_s;
extern "C" {
    pub fn rcl_clock_time_started(clock: *mut rcl_clock_t) -> bool;
}
extern "C" {
    pub fn rcl_clock_valid(clock: *mut rcl_clock_t) -> bool;
}
extern "C" {
    pub fn rcl_clock_init(
        clock_type: rcl_clock_type_t,
        clock: *mut rcl_clock_t,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_clock_fini(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_ros_clock_init(
        clock: *mut rcl_clock_t,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_ros_clock_fini(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_steady_clock_init(
        clock: *mut rcl_clock_t,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_steady_clock_fini(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_system_clock_init(
        clock: *mut rcl_clock_t,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_system_clock_fini(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_difference_times(
        start: *const rcl_time_point_t,
        finish: *const rcl_time_point_t,
        delta: *mut rcl_duration_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_clock_get_now(
        clock: *mut rcl_clock_t,
        time_point_value: *mut rcl_time_point_value_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_enable_ros_time_override(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_disable_ros_time_override(clock: *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_is_enabled_ros_time_override(
        clock: *mut rcl_clock_t,
        is_enabled: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_set_ros_time_override(
        clock: *mut rcl_clock_t,
        time_value: rcl_time_point_value_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_clock_add_jump_callback(
        clock: *mut rcl_clock_t,
        threshold: rcl_jump_threshold_t,
        callback: rcl_jump_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_clock_remove_jump_callback(
        clock: *mut rcl_clock_t,
        callback: rcl_jump_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_publisher_impl_s {
    _unused: [u8; 0],
}
pub type rcl_publisher_impl_t = rcl_publisher_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_publisher_s {
    pub impl_: *mut rcl_publisher_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_publisher_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_publisher_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_publisher_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_publisher_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_publisher_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_publisher_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_publisher_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_publisher_t = rcl_publisher_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_publisher_options_s {
    pub qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
    pub rmw_publisher_options: rmw_publisher_options_t,
}
#[test]
fn bindgen_test_layout_rcl_publisher_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_publisher_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_publisher_options_s>(),
        144usize,
        concat!("Size of: ", stringify!(rcl_publisher_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_publisher_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_publisher_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_publisher_options_s),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_publisher_options_s),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmw_publisher_options) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_publisher_options_s),
            "::",
            stringify!(rmw_publisher_options)
        )
    );
}
pub type rcl_publisher_options_t = rcl_publisher_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_publisher() -> rcl_publisher_t;
}
extern "C" {
    pub fn rcl_publisher_init(
        publisher: *mut rcl_publisher_t,
        node: *const rcl_node_t,
        type_support: *const rosidl_message_type_support_t,
        topic_name: *const ::std::os::raw::c_char,
        options: *const rcl_publisher_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_fini(publisher: *mut rcl_publisher_t, node: *mut rcl_node_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_get_default_options() -> rcl_publisher_options_t;
}
extern "C" {
    pub fn rcl_borrow_loaned_message(
        publisher: *const rcl_publisher_t,
        type_support: *const rosidl_message_type_support_t,
        ros_message: *mut *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_return_loaned_message_from_publisher(
        publisher: *const rcl_publisher_t,
        loaned_message: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publish(
        publisher: *const rcl_publisher_t,
        ros_message: *const ::std::os::raw::c_void,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publish_serialized_message(
        publisher: *const rcl_publisher_t,
        serialized_message: *const rcl_serialized_message_t,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publish_loaned_message(
        publisher: *const rcl_publisher_t,
        ros_message: *mut ::std::os::raw::c_void,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_assert_liveliness(publisher: *const rcl_publisher_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_wait_for_all_acked(
        publisher: *const rcl_publisher_t,
        timeout: rcl_duration_value_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_get_topic_name(
        publisher: *const rcl_publisher_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_publisher_get_options(
        publisher: *const rcl_publisher_t,
    ) -> *const rcl_publisher_options_t;
}
extern "C" {
    pub fn rcl_publisher_get_rmw_handle(publisher: *const rcl_publisher_t) -> *mut rmw_publisher_t;
}
extern "C" {
    pub fn rcl_publisher_get_context(publisher: *const rcl_publisher_t) -> *mut rcl_context_t;
}
extern "C" {
    pub fn rcl_publisher_is_valid(publisher: *const rcl_publisher_t) -> bool;
}
extern "C" {
    pub fn rcl_publisher_is_valid_except_context(publisher: *const rcl_publisher_t) -> bool;
}
extern "C" {
    pub fn rcl_publisher_get_subscription_count(
        publisher: *const rcl_publisher_t,
        subscription_count: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_publisher_get_actual_qos(
        publisher: *const rcl_publisher_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_publisher_can_loan_messages(publisher: *const rcl_publisher_t) -> bool;
}
pub type rmw_event_callback_t = ::std::option::Option<
    unsafe extern "C" fn(user_data: *const ::std::os::raw::c_void, number_of_events: usize),
>;
pub type rcl_event_callback_t = rmw_event_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_sequence_s {
    pub data: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub capacity: usize,
    pub allocator: *mut rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rmw_message_sequence_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_message_sequence_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_message_sequence_s>(),
        32usize,
        concat!("Size of: ", stringify!(rmw_message_sequence_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_message_sequence_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_message_sequence_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_sequence_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_sequence_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_sequence_s),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_sequence_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rmw_message_sequence_t = rmw_message_sequence_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_message_info_sequence_s {
    pub data: *mut rmw_message_info_t,
    pub size: usize,
    pub capacity: usize,
    pub allocator: *mut rcutils_allocator_t,
}
#[test]
fn bindgen_test_layout_rmw_message_info_sequence_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_message_info_sequence_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_message_info_sequence_s>(),
        32usize,
        concat!("Size of: ", stringify!(rmw_message_info_sequence_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_message_info_sequence_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_message_info_sequence_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_sequence_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_sequence_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_sequence_s),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_message_info_sequence_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rmw_message_info_sequence_t = rmw_message_info_sequence_s;
extern "C" {
    pub fn rmw_get_zero_initialized_message_sequence() -> rmw_message_sequence_t;
}
extern "C" {
    pub fn rmw_message_sequence_init(
        sequence: *mut rmw_message_sequence_t,
        size: usize,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_message_sequence_fini(sequence: *mut rmw_message_sequence_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_zero_initialized_message_info_sequence() -> rmw_message_info_sequence_t;
}
extern "C" {
    pub fn rmw_message_info_sequence_init(
        sequence: *mut rmw_message_info_sequence_t,
        size: usize,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_message_info_sequence_fini(sequence: *mut rmw_message_info_sequence_t) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_subscription_impl_s {
    _unused: [u8; 0],
}
pub type rcl_subscription_impl_t = rcl_subscription_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_subscription_s {
    pub impl_: *mut rcl_subscription_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_subscription_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_subscription_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_subscription_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_subscription_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_subscription_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_subscription_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_subscription_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_subscription_t = rcl_subscription_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_subscription_options_s {
    pub qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
    pub rmw_subscription_options: rmw_subscription_options_t,
}
#[test]
fn bindgen_test_layout_rcl_subscription_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_subscription_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_subscription_options_s>(),
        152usize,
        concat!("Size of: ", stringify!(rcl_subscription_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_subscription_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_subscription_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_subscription_options_s),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_subscription_options_s),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmw_subscription_options) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_subscription_options_s),
            "::",
            stringify!(rmw_subscription_options)
        )
    );
}
pub type rcl_subscription_options_t = rcl_subscription_options_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_subscription_content_filter_options_s {
    pub rmw_subscription_content_filter_options: rmw_subscription_content_filter_options_t,
}
#[test]
fn bindgen_test_layout_rcl_subscription_content_filter_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_subscription_content_filter_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_subscription_content_filter_options_s>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(rcl_subscription_content_filter_options_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_subscription_content_filter_options_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rcl_subscription_content_filter_options_s)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rmw_subscription_content_filter_options) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_subscription_content_filter_options_s),
            "::",
            stringify!(rmw_subscription_content_filter_options)
        )
    );
}
pub type rcl_subscription_content_filter_options_t = rcl_subscription_content_filter_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_subscription() -> rcl_subscription_t;
}
extern "C" {
    pub fn rcl_subscription_init(
        subscription: *mut rcl_subscription_t,
        node: *const rcl_node_t,
        type_support: *const rosidl_message_type_support_t,
        topic_name: *const ::std::os::raw::c_char,
        options: *const rcl_subscription_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_fini(
        subscription: *mut rcl_subscription_t,
        node: *mut rcl_node_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_get_default_options() -> rcl_subscription_options_t;
}
extern "C" {
    pub fn rcl_subscription_options_fini(option: *mut rcl_subscription_options_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_options_set_content_filter_options(
        filter_expression: *const ::std::os::raw::c_char,
        expression_parameters_argc: usize,
        expression_parameter_argv: *mut *const ::std::os::raw::c_char,
        options: *mut rcl_subscription_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_zero_initialized_subscription_content_filter_options(
    ) -> rcl_subscription_content_filter_options_t;
}
extern "C" {
    pub fn rcl_subscription_content_filter_options_init(
        subscription: *const rcl_subscription_t,
        filter_expression: *const ::std::os::raw::c_char,
        expression_parameters_argc: usize,
        expression_parameter_argv: *mut *const ::std::os::raw::c_char,
        options: *mut rcl_subscription_content_filter_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_content_filter_options_set(
        subscription: *const rcl_subscription_t,
        filter_expression: *const ::std::os::raw::c_char,
        expression_parameters_argc: usize,
        expression_parameter_argv: *mut *const ::std::os::raw::c_char,
        options: *mut rcl_subscription_content_filter_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_content_filter_options_fini(
        subscription: *const rcl_subscription_t,
        options: *mut rcl_subscription_content_filter_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_is_cft_enabled(subscription: *const rcl_subscription_t) -> bool;
}
extern "C" {
    pub fn rcl_subscription_set_content_filter(
        subscription: *const rcl_subscription_t,
        options: *const rcl_subscription_content_filter_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_get_content_filter(
        subscription: *const rcl_subscription_t,
        options: *mut rcl_subscription_content_filter_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take(
        subscription: *const rcl_subscription_t,
        ros_message: *mut ::std::os::raw::c_void,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_sequence(
        subscription: *const rcl_subscription_t,
        count: usize,
        message_sequence: *mut rmw_message_sequence_t,
        message_info_sequence: *mut rmw_message_info_sequence_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_serialized_message(
        subscription: *const rcl_subscription_t,
        serialized_message: *mut rcl_serialized_message_t,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_loaned_message(
        subscription: *const rcl_subscription_t,
        loaned_message: *mut *mut ::std::os::raw::c_void,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_return_loaned_message_from_subscription(
        subscription: *const rcl_subscription_t,
        loaned_message: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_get_topic_name(
        subscription: *const rcl_subscription_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_subscription_get_options(
        subscription: *const rcl_subscription_t,
    ) -> *const rcl_subscription_options_t;
}
extern "C" {
    pub fn rcl_subscription_get_rmw_handle(
        subscription: *const rcl_subscription_t,
    ) -> *mut rmw_subscription_t;
}
extern "C" {
    pub fn rcl_subscription_is_valid(subscription: *const rcl_subscription_t) -> bool;
}
extern "C" {
    pub fn rcl_subscription_get_publisher_count(
        subscription: *const rcl_subscription_t,
        publisher_count: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rcl_subscription_get_actual_qos(
        subscription: *const rcl_subscription_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_subscription_can_loan_messages(subscription: *const rcl_subscription_t) -> bool;
}
extern "C" {
    pub fn rcl_subscription_set_on_new_message_callback(
        subscription: *const rcl_subscription_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
pub type rosidl_service_typesupport_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_service_type_support_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_service_type_support_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_service_type_support_t {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_service_typesupport_handle_function,
}
#[test]
fn bindgen_test_layout_rosidl_service_type_support_t() {
    const UNINIT: ::std::mem::MaybeUninit<rosidl_service_type_support_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rosidl_service_type_support_t>(),
        24usize,
        concat!("Size of: ", stringify!(rosidl_service_type_support_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rosidl_service_type_support_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rosidl_service_type_support_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesupport_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_service_type_support_t),
            "::",
            stringify!(typesupport_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_service_type_support_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_service_type_support_t),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn get_service_typesupport_handle(
        handle: *const rosidl_service_type_support_t,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_service_type_support_t;
}
extern "C" {
    pub fn get_service_typesupport_handle_function(
        handle: *const rosidl_service_type_support_t,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_service_type_support_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_client_impl_s {
    _unused: [u8; 0],
}
pub type rcl_client_impl_t = rcl_client_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_client_s {
    pub impl_: *mut rcl_client_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_client_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_client_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_client_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_client_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_client_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_client_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_client_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_client_t = rcl_client_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_client_options_s {
    pub qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_client_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_client_options_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_client_options_s>(),
        128usize,
        concat!("Size of: ", stringify!(rcl_client_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_client_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_client_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_client_options_s),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_client_options_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_client_options_t = rcl_client_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_client() -> rcl_client_t;
}
extern "C" {
    pub fn rcl_client_init(
        client: *mut rcl_client_t,
        node: *const rcl_node_t,
        type_support: *const rosidl_service_type_support_t,
        service_name: *const ::std::os::raw::c_char,
        options: *const rcl_client_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_client_fini(client: *mut rcl_client_t, node: *mut rcl_node_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_client_get_default_options() -> rcl_client_options_t;
}
extern "C" {
    pub fn rcl_send_request(
        client: *const rcl_client_t,
        ros_request: *const ::std::os::raw::c_void,
        sequence_number: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_response_with_info(
        client: *const rcl_client_t,
        request_header: *mut rmw_service_info_t,
        ros_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_response(
        client: *const rcl_client_t,
        request_header: *mut rmw_request_id_t,
        ros_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_client_get_service_name(
        client: *const rcl_client_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_client_get_options(client: *const rcl_client_t) -> *const rcl_client_options_t;
}
extern "C" {
    pub fn rcl_client_get_rmw_handle(client: *const rcl_client_t) -> *mut rmw_client_t;
}
extern "C" {
    pub fn rcl_client_is_valid(client: *const rcl_client_t) -> bool;
}
extern "C" {
    pub fn rcl_client_request_publisher_get_actual_qos(
        client: *const rcl_client_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_client_response_subscription_get_actual_qos(
        client: *const rcl_client_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_client_set_on_new_response_callback(
        client: *const rcl_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_service_impl_s {
    _unused: [u8; 0],
}
pub type rcl_service_impl_t = rcl_service_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_service_s {
    pub impl_: *mut rcl_service_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_service_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_service_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_service_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_service_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_service_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_service_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_service_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_service_t = rcl_service_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_service_options_s {
    pub qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_service_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_service_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_service_options_s>(),
        128usize,
        concat!("Size of: ", stringify!(rcl_service_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_service_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_service_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_service_options_s),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_service_options_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_service_options_t = rcl_service_options_s;
extern "C" {
    pub fn rcl_get_zero_initialized_service() -> rcl_service_t;
}
extern "C" {
    pub fn rcl_service_init(
        service: *mut rcl_service_t,
        node: *const rcl_node_t,
        type_support: *const rosidl_service_type_support_t,
        service_name: *const ::std::os::raw::c_char,
        options: *const rcl_service_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_service_fini(service: *mut rcl_service_t, node: *mut rcl_node_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_service_get_default_options() -> rcl_service_options_t;
}
extern "C" {
    pub fn rcl_take_request_with_info(
        service: *const rcl_service_t,
        request_header: *mut rmw_service_info_t,
        ros_request: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_request(
        service: *const rcl_service_t,
        request_header: *mut rmw_request_id_t,
        ros_request: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_send_response(
        service: *const rcl_service_t,
        response_header: *mut rmw_request_id_t,
        ros_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_service_get_service_name(
        service: *const rcl_service_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_service_get_options(service: *const rcl_service_t) -> *const rcl_service_options_t;
}
extern "C" {
    pub fn rcl_service_get_rmw_handle(service: *const rcl_service_t) -> *mut rmw_service_t;
}
extern "C" {
    pub fn rcl_service_is_valid(service: *const rcl_service_t) -> bool;
}
extern "C" {
    pub fn rcl_service_request_subscription_get_actual_qos(
        service: *const rcl_service_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_service_response_publisher_get_actual_qos(
        service: *const rcl_service_t,
    ) -> *const rmw_qos_profile_t;
}
extern "C" {
    pub fn rcl_service_set_on_new_request_callback(
        service: *const rcl_service_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
pub type rosidl_runtime_c__bound_handle_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rosidl_runtime_c__Sequence__bound,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const rosidl_runtime_c__Sequence__bound,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_runtime_c__Sequence__bound {
    pub typesupport_identifier: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub func: rosidl_runtime_c__bound_handle_function,
}
#[test]
fn bindgen_test_layout_rosidl_runtime_c__Sequence__bound() {
    const UNINIT: ::std::mem::MaybeUninit<rosidl_runtime_c__Sequence__bound> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rosidl_runtime_c__Sequence__bound>(),
        24usize,
        concat!("Size of: ", stringify!(rosidl_runtime_c__Sequence__bound))
    );
    assert_eq!(
        ::std::mem::align_of::<rosidl_runtime_c__Sequence__bound>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rosidl_runtime_c__Sequence__bound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesupport_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_runtime_c__Sequence__bound),
            "::",
            stringify!(typesupport_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_runtime_c__Sequence__bound),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_runtime_c__Sequence__bound),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn get_sequence_bound_handle(
        handle: *const rosidl_runtime_c__Sequence__bound,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_runtime_c__Sequence__bound;
}
extern "C" {
    pub fn get_sequence_bound_handle_function(
        handle: *const rosidl_runtime_c__Sequence__bound,
        identifier: *const ::std::os::raw::c_char,
    ) -> *const rosidl_runtime_c__Sequence__bound;
}
pub const rmw_event_type_e_RMW_EVENT_LIVELINESS_CHANGED: rmw_event_type_e = 0;
pub const rmw_event_type_e_RMW_EVENT_REQUESTED_DEADLINE_MISSED: rmw_event_type_e = 1;
pub const rmw_event_type_e_RMW_EVENT_REQUESTED_QOS_INCOMPATIBLE: rmw_event_type_e = 2;
pub const rmw_event_type_e_RMW_EVENT_MESSAGE_LOST: rmw_event_type_e = 3;
pub const rmw_event_type_e_RMW_EVENT_LIVELINESS_LOST: rmw_event_type_e = 4;
pub const rmw_event_type_e_RMW_EVENT_OFFERED_DEADLINE_MISSED: rmw_event_type_e = 5;
pub const rmw_event_type_e_RMW_EVENT_OFFERED_QOS_INCOMPATIBLE: rmw_event_type_e = 6;
pub const rmw_event_type_e_RMW_EVENT_INVALID: rmw_event_type_e = 7;
pub type rmw_event_type_e = ::std::os::raw::c_uint;
pub use self::rmw_event_type_e as rmw_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_event_s {
    pub implementation_identifier: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub event_type: rmw_event_type_t,
}
#[test]
fn bindgen_test_layout_rmw_event_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_event_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_event_s>(),
        24usize,
        concat!("Size of: ", stringify!(rmw_event_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_event_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_event_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementation_identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_event_s),
            "::",
            stringify!(implementation_identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_event_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_event_s),
            "::",
            stringify!(event_type)
        )
    );
}
pub type rmw_event_t = rmw_event_s;
extern "C" {
    pub fn rmw_get_zero_initialized_event() -> rmw_event_t;
}
extern "C" {
    pub fn rmw_publisher_event_init(
        rmw_event: *mut rmw_event_t,
        publisher: *const rmw_publisher_t,
        event_type: rmw_event_type_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_event_init(
        rmw_event: *mut rmw_event_t,
        subscription: *const rmw_subscription_t,
        event_type: rmw_event_type_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_event(
        event_handle: *const rmw_event_t,
        event_info: *mut ::std::os::raw::c_void,
        taken: *mut bool,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_event_fini(event: *mut rmw_event_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_default_publisher_options() -> rmw_publisher_options_t;
}
extern "C" {
    pub static rmw_qos_profile_sensor_data: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_parameters: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_default: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_services_default: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_parameter_events: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_system_default: rmw_qos_profile_t;
}
extern "C" {
    pub static rmw_qos_profile_unknown: rmw_qos_profile_t;
}
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_OK: rmw_qos_compatibility_type_e = 0;
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_WARNING: rmw_qos_compatibility_type_e =
    1;
pub const rmw_qos_compatibility_type_e_RMW_QOS_COMPATIBILITY_ERROR: rmw_qos_compatibility_type_e =
    2;
pub type rmw_qos_compatibility_type_e = ::std::os::raw::c_uint;
pub use self::rmw_qos_compatibility_type_e as rmw_qos_compatibility_type_t;
extern "C" {
    pub fn rmw_qos_profile_check_compatible(
        publisher_profile: rmw_qos_profile_t,
        subscription_profile: rmw_qos_profile_t,
        compatibility: *mut rmw_qos_compatibility_type_t,
        reason: *mut ::std::os::raw::c_char,
        reason_size: usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_default_subscription_options() -> rmw_subscription_options_t;
}
extern "C" {
    pub fn rmw_get_implementation_identifier() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rmw_get_serialization_format() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rmw_create_node(
        context: *mut rmw_context_t,
        name: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> *mut rmw_node_t;
}
extern "C" {
    pub fn rmw_destroy_node(node: *mut rmw_node_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_node_assert_liveliness(node: *const rmw_node_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_node_get_graph_guard_condition(
        node: *const rmw_node_t,
    ) -> *const rmw_guard_condition_t;
}
extern "C" {
    pub fn rmw_init_publisher_allocation(
        type_support: *const rosidl_message_type_support_t,
        message_bounds: *const rosidl_runtime_c__Sequence__bound,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_fini_publisher_allocation(allocation: *mut rmw_publisher_allocation_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_publisher(
        node: *const rmw_node_t,
        type_support: *const rosidl_message_type_support_t,
        topic_name: *const ::std::os::raw::c_char,
        qos_profile: *const rmw_qos_profile_t,
        publisher_options: *const rmw_publisher_options_t,
    ) -> *mut rmw_publisher_t;
}
extern "C" {
    pub fn rmw_destroy_publisher(
        node: *mut rmw_node_t,
        publisher: *mut rmw_publisher_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_borrow_loaned_message(
        publisher: *const rmw_publisher_t,
        type_support: *const rosidl_message_type_support_t,
        ros_message: *mut *mut ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_return_loaned_message_from_publisher(
        publisher: *const rmw_publisher_t,
        loaned_message: *mut ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publish(
        publisher: *const rmw_publisher_t,
        ros_message: *const ::std::os::raw::c_void,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publish_loaned_message(
        publisher: *const rmw_publisher_t,
        ros_message: *mut ::std::os::raw::c_void,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publisher_count_matched_subscriptions(
        publisher: *const rmw_publisher_t,
        subscription_count: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publisher_get_actual_qos(
        publisher: *const rmw_publisher_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publish_serialized_message(
        publisher: *const rmw_publisher_t,
        serialized_message: *const rmw_serialized_message_t,
        allocation: *mut rmw_publisher_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_serialized_message_size(
        type_support: *const rosidl_message_type_support_t,
        message_bounds: *const rosidl_runtime_c__Sequence__bound,
        size: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publisher_assert_liveliness(publisher: *const rmw_publisher_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_publisher_wait_for_all_acked(
        publisher: *const rmw_publisher_t,
        wait_timeout: rmw_time_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_serialize(
        ros_message: *const ::std::os::raw::c_void,
        type_support: *const rosidl_message_type_support_t,
        serialized_message: *mut rmw_serialized_message_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_deserialize(
        serialized_message: *const rmw_serialized_message_t,
        type_support: *const rosidl_message_type_support_t,
        ros_message: *mut ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_init_subscription_allocation(
        type_support: *const rosidl_message_type_support_t,
        message_bounds: *const rosidl_runtime_c__Sequence__bound,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_fini_subscription_allocation(
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_subscription(
        node: *const rmw_node_t,
        type_support: *const rosidl_message_type_support_t,
        topic_name: *const ::std::os::raw::c_char,
        qos_policies: *const rmw_qos_profile_t,
        subscription_options: *const rmw_subscription_options_t,
    ) -> *mut rmw_subscription_t;
}
extern "C" {
    pub fn rmw_destroy_subscription(
        node: *mut rmw_node_t,
        subscription: *mut rmw_subscription_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_count_matched_publishers(
        subscription: *const rmw_subscription_t,
        publisher_count: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_get_actual_qos(
        subscription: *const rmw_subscription_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_set_content_filter(
        subscription: *mut rmw_subscription_t,
        options: *const rmw_subscription_content_filter_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_get_content_filter(
        subscription: *const rmw_subscription_t,
        allocator: *mut rcutils_allocator_t,
        options: *mut rmw_subscription_content_filter_options_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take(
        subscription: *const rmw_subscription_t,
        ros_message: *mut ::std::os::raw::c_void,
        taken: *mut bool,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_with_info(
        subscription: *const rmw_subscription_t,
        ros_message: *mut ::std::os::raw::c_void,
        taken: *mut bool,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_sequence(
        subscription: *const rmw_subscription_t,
        count: usize,
        message_sequence: *mut rmw_message_sequence_t,
        message_info_sequence: *mut rmw_message_info_sequence_t,
        taken: *mut usize,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_serialized_message(
        subscription: *const rmw_subscription_t,
        serialized_message: *mut rmw_serialized_message_t,
        taken: *mut bool,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_serialized_message_with_info(
        subscription: *const rmw_subscription_t,
        serialized_message: *mut rmw_serialized_message_t,
        taken: *mut bool,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_loaned_message(
        subscription: *const rmw_subscription_t,
        loaned_message: *mut *mut ::std::os::raw::c_void,
        taken: *mut bool,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_loaned_message_with_info(
        subscription: *const rmw_subscription_t,
        loaned_message: *mut *mut ::std::os::raw::c_void,
        taken: *mut bool,
        message_info: *mut rmw_message_info_t,
        allocation: *mut rmw_subscription_allocation_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_return_loaned_message_from_subscription(
        subscription: *const rmw_subscription_t,
        loaned_message: *mut ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_client(
        node: *const rmw_node_t,
        type_support: *const rosidl_service_type_support_t,
        service_name: *const ::std::os::raw::c_char,
        qos_policies: *const rmw_qos_profile_t,
    ) -> *mut rmw_client_t;
}
extern "C" {
    pub fn rmw_destroy_client(node: *mut rmw_node_t, client: *mut rmw_client_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_send_request(
        client: *const rmw_client_t,
        ros_request: *const ::std::os::raw::c_void,
        sequence_id: *mut i64,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_response(
        client: *const rmw_client_t,
        request_header: *mut rmw_service_info_t,
        ros_response: *mut ::std::os::raw::c_void,
        taken: *mut bool,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_client_request_publisher_get_actual_qos(
        client: *const rmw_client_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_client_response_subscription_get_actual_qos(
        client: *const rmw_client_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_service(
        node: *const rmw_node_t,
        type_support: *const rosidl_service_type_support_t,
        service_name: *const ::std::os::raw::c_char,
        qos_profile: *const rmw_qos_profile_t,
    ) -> *mut rmw_service_t;
}
extern "C" {
    pub fn rmw_destroy_service(node: *mut rmw_node_t, service: *mut rmw_service_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_take_request(
        service: *const rmw_service_t,
        request_header: *mut rmw_service_info_t,
        ros_request: *mut ::std::os::raw::c_void,
        taken: *mut bool,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_send_response(
        service: *const rmw_service_t,
        request_header: *mut rmw_request_id_t,
        ros_response: *mut ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_service_request_subscription_get_actual_qos(
        service: *const rmw_service_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_service_response_publisher_get_actual_qos(
        service: *const rmw_service_t,
        qos: *mut rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_guard_condition(context: *mut rmw_context_t) -> *mut rmw_guard_condition_t;
}
extern "C" {
    pub fn rmw_destroy_guard_condition(guard_condition: *mut rmw_guard_condition_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_trigger_guard_condition(guard_condition: *const rmw_guard_condition_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_create_wait_set(
        context: *mut rmw_context_t,
        max_conditions: usize,
    ) -> *mut rmw_wait_set_t;
}
extern "C" {
    pub fn rmw_destroy_wait_set(wait_set: *mut rmw_wait_set_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_wait(
        subscriptions: *mut rmw_subscriptions_t,
        guard_conditions: *mut rmw_guard_conditions_t,
        services: *mut rmw_services_t,
        clients: *mut rmw_clients_t,
        events: *mut rmw_events_t,
        wait_set: *mut rmw_wait_set_t,
        wait_timeout: *const rmw_time_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_node_names(
        node: *const rmw_node_t,
        node_names: *mut rcutils_string_array_t,
        node_namespaces: *mut rcutils_string_array_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_node_names_with_enclaves(
        node: *const rmw_node_t,
        node_names: *mut rcutils_string_array_t,
        node_namespaces: *mut rcutils_string_array_t,
        enclaves: *mut rcutils_string_array_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_count_publishers(
        node: *const rmw_node_t,
        topic_name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_count_subscribers(
        node: *const rmw_node_t,
        topic_name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_gid_for_publisher(
        publisher: *const rmw_publisher_t,
        gid: *mut rmw_gid_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_compare_gids_equal(
        gid1: *const rmw_gid_t,
        gid2: *const rmw_gid_t,
        result: *mut bool,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_service_server_is_available(
        node: *const rmw_node_t,
        client: *const rmw_client_t,
        is_available: *mut bool,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_set_log_severity(severity: rmw_log_severity_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_subscription_set_on_new_message_callback(
        subscription: *mut rmw_subscription_t,
        callback: rmw_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_service_set_on_new_request_callback(
        service: *mut rmw_service_t,
        callback: rmw_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_client_set_on_new_response_callback(
        client: *mut rmw_client_t,
        callback: rmw_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_event_set_callback(
        event: *mut rmw_event_t,
        callback: rmw_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_timer_impl_s {
    _unused: [u8; 0],
}
pub type rcl_timer_impl_t = rcl_timer_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_timer_s {
    pub impl_: *mut rcl_timer_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_timer_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_timer_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_timer_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_timer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_timer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_timer_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_timer_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_timer_t = rcl_timer_s;
pub type rcl_timer_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut rcl_timer_t, arg2: i64)>;
extern "C" {
    pub fn rcl_get_zero_initialized_timer() -> rcl_timer_t;
}
extern "C" {
    pub fn rcl_timer_init(
        timer: *mut rcl_timer_t,
        clock: *mut rcl_clock_t,
        context: *mut rcl_context_t,
        period: i64,
        callback: rcl_timer_callback_t,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_fini(timer: *mut rcl_timer_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_call(timer: *mut rcl_timer_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_clock(timer: *mut rcl_timer_t, clock: *mut *mut rcl_clock_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_is_ready(timer: *const rcl_timer_t, is_ready: *mut bool) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_get_time_until_next_call(
        timer: *const rcl_timer_t,
        time_until_next_call: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_get_time_since_last_call(
        timer: *const rcl_timer_t,
        time_since_last_call: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_get_period(timer: *const rcl_timer_t, period: *mut i64) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_exchange_period(
        timer: *const rcl_timer_t,
        new_period: i64,
        old_period: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_get_callback(timer: *const rcl_timer_t) -> rcl_timer_callback_t;
}
extern "C" {
    pub fn rcl_timer_exchange_callback(
        timer: *mut rcl_timer_t,
        new_callback: rcl_timer_callback_t,
    ) -> rcl_timer_callback_t;
}
extern "C" {
    pub fn rcl_timer_cancel(timer: *mut rcl_timer_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_is_canceled(timer: *const rcl_timer_t, is_canceled: *mut bool) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_reset(timer: *mut rcl_timer_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_timer_get_allocator(timer: *const rcl_timer_t) -> *const rcl_allocator_t;
}
extern "C" {
    pub fn rcl_timer_get_guard_condition(timer: *const rcl_timer_t) -> *mut rcl_guard_condition_t;
}
pub const rcl_publisher_event_type_e_RCL_PUBLISHER_OFFERED_DEADLINE_MISSED:
    rcl_publisher_event_type_e = 0;
pub const rcl_publisher_event_type_e_RCL_PUBLISHER_LIVELINESS_LOST: rcl_publisher_event_type_e = 1;
pub const rcl_publisher_event_type_e_RCL_PUBLISHER_OFFERED_INCOMPATIBLE_QOS:
    rcl_publisher_event_type_e = 2;
pub type rcl_publisher_event_type_e = ::std::os::raw::c_uint;
pub use self::rcl_publisher_event_type_e as rcl_publisher_event_type_t;
pub const rcl_subscription_event_type_e_RCL_SUBSCRIPTION_REQUESTED_DEADLINE_MISSED:
    rcl_subscription_event_type_e = 0;
pub const rcl_subscription_event_type_e_RCL_SUBSCRIPTION_LIVELINESS_CHANGED:
    rcl_subscription_event_type_e = 1;
pub const rcl_subscription_event_type_e_RCL_SUBSCRIPTION_REQUESTED_INCOMPATIBLE_QOS:
    rcl_subscription_event_type_e = 2;
pub const rcl_subscription_event_type_e_RCL_SUBSCRIPTION_MESSAGE_LOST:
    rcl_subscription_event_type_e = 3;
pub type rcl_subscription_event_type_e = ::std::os::raw::c_uint;
pub use self::rcl_subscription_event_type_e as rcl_subscription_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_event_impl_s {
    _unused: [u8; 0],
}
pub type rcl_event_impl_t = rcl_event_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_event_s {
    pub impl_: *mut rcl_event_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_event_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_event_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_event_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_event_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_event_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_event_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_event_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_event_t = rcl_event_s;
extern "C" {
    pub fn rcl_get_zero_initialized_event() -> rcl_event_t;
}
extern "C" {
    pub fn rcl_publisher_event_init(
        event: *mut rcl_event_t,
        publisher: *const rcl_publisher_t,
        event_type: rcl_publisher_event_type_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_subscription_event_init(
        event: *mut rcl_event_t,
        subscription: *const rcl_subscription_t,
        event_type: rcl_subscription_event_type_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_take_event(
        event: *const rcl_event_t,
        event_info: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_event_fini(event: *mut rcl_event_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_event_get_rmw_handle(event: *const rcl_event_t) -> *mut rmw_event_t;
}
extern "C" {
    pub fn rcl_event_is_valid(event: *const rcl_event_t) -> bool;
}
extern "C" {
    pub fn rcl_event_set_callback(
        event: *const rcl_event_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_wait_set_impl_s {
    _unused: [u8; 0],
}
pub type rcl_wait_set_impl_t = rcl_wait_set_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_wait_set_s {
    pub subscriptions: *mut *const rcl_subscription_t,
    pub size_of_subscriptions: usize,
    pub guard_conditions: *mut *const rcl_guard_condition_t,
    pub size_of_guard_conditions: usize,
    pub timers: *mut *const rcl_timer_t,
    pub size_of_timers: usize,
    pub clients: *mut *const rcl_client_t,
    pub size_of_clients: usize,
    pub services: *mut *const rcl_service_t,
    pub size_of_services: usize,
    pub events: *mut *const rcl_event_t,
    pub size_of_events: usize,
    pub impl_: *mut rcl_wait_set_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_wait_set_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_wait_set_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_wait_set_s>(),
        104usize,
        concat!("Size of: ", stringify!(rcl_wait_set_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_wait_set_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_wait_set_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subscriptions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(subscriptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_subscriptions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_subscriptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard_conditions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(guard_conditions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_guard_conditions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_guard_conditions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(timers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_timers) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_timers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clients) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(clients)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_clients) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_clients)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).services) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_services) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_services)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_of_events) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(size_of_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_wait_set_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_wait_set_t = rcl_wait_set_s;
extern "C" {
    pub fn rcl_get_zero_initialized_wait_set() -> rcl_wait_set_t;
}
extern "C" {
    pub fn rcl_wait_set_init(
        wait_set: *mut rcl_wait_set_t,
        number_of_subscriptions: usize,
        number_of_guard_conditions: usize,
        number_of_timers: usize,
        number_of_clients: usize,
        number_of_services: usize,
        number_of_events: usize,
        context: *mut rcl_context_t,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_fini(wait_set: *mut rcl_wait_set_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_get_allocator(
        wait_set: *const rcl_wait_set_t,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_subscription(
        wait_set: *mut rcl_wait_set_t,
        subscription: *const rcl_subscription_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_clear(wait_set: *mut rcl_wait_set_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_resize(
        wait_set: *mut rcl_wait_set_t,
        subscriptions_size: usize,
        guard_conditions_size: usize,
        timers_size: usize,
        clients_size: usize,
        services_size: usize,
        events_size: usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_guard_condition(
        wait_set: *mut rcl_wait_set_t,
        guard_condition: *const rcl_guard_condition_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_timer(
        wait_set: *mut rcl_wait_set_t,
        timer: *const rcl_timer_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_client(
        wait_set: *mut rcl_wait_set_t,
        client: *const rcl_client_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_service(
        wait_set: *mut rcl_wait_set_t,
        service: *const rcl_service_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_add_event(
        wait_set: *mut rcl_wait_set_t,
        event: *const rcl_event_t,
        index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait(wait_set: *mut rcl_wait_set_t, timeout: i64) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_set_is_valid(wait_set: *const rcl_wait_set_t) -> bool;
}
pub type rcl_logging_output_handler_t = rcutils_logging_output_handler_t;
extern "C" {
    pub fn rcl_logging_configure(
        global_args: *const rcl_arguments_t,
        allocator: *const rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_logging_configure_with_output_handler(
        global_args: *const rcl_arguments_t,
        allocator: *const rcl_allocator_t,
        output_handler: rcl_logging_output_handler_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_logging_fini() -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_logging_rosout_enabled() -> bool;
}
extern "C" {
    pub fn rcl_logging_multiple_output_handler(
        location: *const rcutils_log_location_t,
        severity: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        timestamp: rcutils_time_point_value_t,
        format: *const ::std::os::raw::c_char,
        args: *mut va_list,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unique_identifier_msgs__msg__UUID {
    pub uuid: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_unique_identifier_msgs__msg__UUID() {
    const UNINIT: ::std::mem::MaybeUninit<unique_identifier_msgs__msg__UUID> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unique_identifier_msgs__msg__UUID>(),
        16usize,
        concat!("Size of: ", stringify!(unique_identifier_msgs__msg__UUID))
    );
    assert_eq!(
        ::std::mem::align_of::<unique_identifier_msgs__msg__UUID>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(unique_identifier_msgs__msg__UUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unique_identifier_msgs__msg__UUID),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unique_identifier_msgs__msg__UUID__Sequence {
    pub data: *mut unique_identifier_msgs__msg__UUID,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_unique_identifier_msgs__msg__UUID__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<unique_identifier_msgs__msg__UUID__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unique_identifier_msgs__msg__UUID__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(unique_identifier_msgs__msg__UUID__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<unique_identifier_msgs__msg__UUID__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unique_identifier_msgs__msg__UUID__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unique_identifier_msgs__msg__UUID__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unique_identifier_msgs__msg__UUID__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unique_identifier_msgs__msg__UUID__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct builtin_interfaces__msg__Time {
    pub sec: i32,
    pub nanosec: u32,
}
#[test]
fn bindgen_test_layout_builtin_interfaces__msg__Time() {
    const UNINIT: ::std::mem::MaybeUninit<builtin_interfaces__msg__Time> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<builtin_interfaces__msg__Time>(),
        8usize,
        concat!("Size of: ", stringify!(builtin_interfaces__msg__Time))
    );
    assert_eq!(
        ::std::mem::align_of::<builtin_interfaces__msg__Time>(),
        4usize,
        concat!("Alignment of ", stringify!(builtin_interfaces__msg__Time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(builtin_interfaces__msg__Time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nanosec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(builtin_interfaces__msg__Time),
            "::",
            stringify!(nanosec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct builtin_interfaces__msg__Time__Sequence {
    pub data: *mut builtin_interfaces__msg__Time,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_builtin_interfaces__msg__Time__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<builtin_interfaces__msg__Time__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<builtin_interfaces__msg__Time__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(builtin_interfaces__msg__Time__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<builtin_interfaces__msg__Time__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(builtin_interfaces__msg__Time__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(builtin_interfaces__msg__Time__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(builtin_interfaces__msg__Time__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(builtin_interfaces__msg__Time__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalInfo {
    pub goal_id: unique_identifier_msgs__msg__UUID,
    pub stamp: builtin_interfaces__msg__Time,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalInfo() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalInfo>(),
        24usize,
        concat!("Size of: ", stringify!(action_msgs__msg__GoalInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(action_msgs__msg__GoalInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalInfo),
            "::",
            stringify!(goal_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalInfo),
            "::",
            stringify!(stamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalInfo__Sequence {
    pub data: *mut action_msgs__msg__GoalInfo,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalInfo__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalInfo__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalInfo__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__msg__GoalInfo__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalInfo__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__msg__GoalInfo__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalInfo__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalInfo__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalInfo__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__init(msg: *mut action_msgs__msg__GoalInfo) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__fini(msg: *mut action_msgs__msg__GoalInfo);
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__create() -> *mut action_msgs__msg__GoalInfo;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__destroy(msg: *mut action_msgs__msg__GoalInfo);
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__are_equal(
        lhs: *const action_msgs__msg__GoalInfo,
        rhs: *const action_msgs__msg__GoalInfo,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__copy(
        input: *const action_msgs__msg__GoalInfo,
        output: *mut action_msgs__msg__GoalInfo,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__init(
        array: *mut action_msgs__msg__GoalInfo__Sequence,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__fini(
        array: *mut action_msgs__msg__GoalInfo__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__create(
        size: usize,
    ) -> *mut action_msgs__msg__GoalInfo__Sequence;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__destroy(
        array: *mut action_msgs__msg__GoalInfo__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__are_equal(
        lhs: *const action_msgs__msg__GoalInfo__Sequence,
        rhs: *const action_msgs__msg__GoalInfo__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalInfo__Sequence__copy(
        input: *const action_msgs__msg__GoalInfo__Sequence,
        output: *mut action_msgs__msg__GoalInfo__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo(
    ) -> *const rosidl_message_type_support_t;
}
pub const action_msgs__msg__GoalStatus__STATUS_UNKNOWN: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_ACCEPTED: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_EXECUTING: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_CANCELING: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_SUCCEEDED: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_CANCELED: _bindgen_ty_7 = 5;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const action_msgs__msg__GoalStatus__STATUS_ABORTED: _bindgen_ty_8 = 6;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalStatus {
    pub goal_info: action_msgs__msg__GoalInfo,
    pub status: i8,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalStatus() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalStatus> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalStatus>(),
        28usize,
        concat!("Size of: ", stringify!(action_msgs__msg__GoalStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalStatus>(),
        4usize,
        concat!("Alignment of ", stringify!(action_msgs__msg__GoalStatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatus),
            "::",
            stringify!(goal_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatus),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalStatus__Sequence {
    pub data: *mut action_msgs__msg__GoalStatus,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalStatus__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalStatus__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalStatus__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__msg__GoalStatus__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalStatus__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__msg__GoalStatus__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatus__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatus__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatus__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__init(msg: *mut action_msgs__msg__GoalStatus) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__fini(msg: *mut action_msgs__msg__GoalStatus);
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__create() -> *mut action_msgs__msg__GoalStatus;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__destroy(msg: *mut action_msgs__msg__GoalStatus);
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__are_equal(
        lhs: *const action_msgs__msg__GoalStatus,
        rhs: *const action_msgs__msg__GoalStatus,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__copy(
        input: *const action_msgs__msg__GoalStatus,
        output: *mut action_msgs__msg__GoalStatus,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__init(
        array: *mut action_msgs__msg__GoalStatus__Sequence,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__fini(
        array: *mut action_msgs__msg__GoalStatus__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__create(
        size: usize,
    ) -> *mut action_msgs__msg__GoalStatus__Sequence;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__destroy(
        array: *mut action_msgs__msg__GoalStatus__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__are_equal(
        lhs: *const action_msgs__msg__GoalStatus__Sequence,
        rhs: *const action_msgs__msg__GoalStatus__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatus__Sequence__copy(
        input: *const action_msgs__msg__GoalStatus__Sequence,
        output: *mut action_msgs__msg__GoalStatus__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatus(
    ) -> *const rosidl_message_type_support_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalStatusArray {
    pub status_list: action_msgs__msg__GoalStatus__Sequence,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalStatusArray() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalStatusArray> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalStatusArray>(),
        24usize,
        concat!("Size of: ", stringify!(action_msgs__msg__GoalStatusArray))
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalStatusArray>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__msg__GoalStatusArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatusArray),
            "::",
            stringify!(status_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__msg__GoalStatusArray__Sequence {
    pub data: *mut action_msgs__msg__GoalStatusArray,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_action_msgs__msg__GoalStatusArray__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__msg__GoalStatusArray__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__msg__GoalStatusArray__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__msg__GoalStatusArray__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__msg__GoalStatusArray__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__msg__GoalStatusArray__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatusArray__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatusArray__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__msg__GoalStatusArray__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__init(
        msg: *mut action_msgs__msg__GoalStatusArray,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__fini(msg: *mut action_msgs__msg__GoalStatusArray);
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__create() -> *mut action_msgs__msg__GoalStatusArray;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__destroy(msg: *mut action_msgs__msg__GoalStatusArray);
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__are_equal(
        lhs: *const action_msgs__msg__GoalStatusArray,
        rhs: *const action_msgs__msg__GoalStatusArray,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__copy(
        input: *const action_msgs__msg__GoalStatusArray,
        output: *mut action_msgs__msg__GoalStatusArray,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__init(
        array: *mut action_msgs__msg__GoalStatusArray__Sequence,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__fini(
        array: *mut action_msgs__msg__GoalStatusArray__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__create(
        size: usize,
    ) -> *mut action_msgs__msg__GoalStatusArray__Sequence;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__destroy(
        array: *mut action_msgs__msg__GoalStatusArray__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__are_equal(
        lhs: *const action_msgs__msg__GoalStatusArray__Sequence,
        rhs: *const action_msgs__msg__GoalStatusArray__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__msg__GoalStatusArray__Sequence__copy(
        input: *const action_msgs__msg__GoalStatusArray__Sequence,
        output: *mut action_msgs__msg__GoalStatusArray__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalStatusArray(
    ) -> *const rosidl_message_type_support_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__srv__CancelGoal_Request {
    pub goal_info: action_msgs__msg__GoalInfo,
}
#[test]
fn bindgen_test_layout_action_msgs__srv__CancelGoal_Request() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__srv__CancelGoal_Request> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__srv__CancelGoal_Request>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__srv__CancelGoal_Request)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__srv__CancelGoal_Request>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__srv__CancelGoal_Request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Request),
            "::",
            stringify!(goal_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__srv__CancelGoal_Request__Sequence {
    pub data: *mut action_msgs__srv__CancelGoal_Request,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_action_msgs__srv__CancelGoal_Request__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__srv__CancelGoal_Request__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__srv__CancelGoal_Request__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__srv__CancelGoal_Request__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__srv__CancelGoal_Request__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__srv__CancelGoal_Request__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Request__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Request__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Request__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
pub const action_msgs__srv__CancelGoal_Response__ERROR_NONE: _bindgen_ty_9 = 0;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const action_msgs__srv__CancelGoal_Response__ERROR_REJECTED: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const action_msgs__srv__CancelGoal_Response__ERROR_UNKNOWN_GOAL_ID: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const action_msgs__srv__CancelGoal_Response__ERROR_GOAL_TERMINATED: _bindgen_ty_12 = 3;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__srv__CancelGoal_Response {
    pub return_code: i8,
    pub goals_canceling: action_msgs__msg__GoalInfo__Sequence,
}
#[test]
fn bindgen_test_layout_action_msgs__srv__CancelGoal_Response() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__srv__CancelGoal_Response> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__srv__CancelGoal_Response>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__srv__CancelGoal_Response)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__srv__CancelGoal_Response>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__srv__CancelGoal_Response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Response),
            "::",
            stringify!(return_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goals_canceling) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Response),
            "::",
            stringify!(goals_canceling)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct action_msgs__srv__CancelGoal_Response__Sequence {
    pub data: *mut action_msgs__srv__CancelGoal_Response,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_action_msgs__srv__CancelGoal_Response__Sequence() {
    const UNINIT: ::std::mem::MaybeUninit<action_msgs__srv__CancelGoal_Response__Sequence> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<action_msgs__srv__CancelGoal_Response__Sequence>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(action_msgs__srv__CancelGoal_Response__Sequence)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<action_msgs__srv__CancelGoal_Response__Sequence>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(action_msgs__srv__CancelGoal_Response__Sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Response__Sequence),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Response__Sequence),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(action_msgs__srv__CancelGoal_Response__Sequence),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__init(
        msg: *mut action_msgs__srv__CancelGoal_Request,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__fini(
        msg: *mut action_msgs__srv__CancelGoal_Request,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__create(
    ) -> *mut action_msgs__srv__CancelGoal_Request;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__destroy(
        msg: *mut action_msgs__srv__CancelGoal_Request,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__are_equal(
        lhs: *const action_msgs__srv__CancelGoal_Request,
        rhs: *const action_msgs__srv__CancelGoal_Request,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__copy(
        input: *const action_msgs__srv__CancelGoal_Request,
        output: *mut action_msgs__srv__CancelGoal_Request,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__init(
        array: *mut action_msgs__srv__CancelGoal_Request__Sequence,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__fini(
        array: *mut action_msgs__srv__CancelGoal_Request__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__create(
        size: usize,
    ) -> *mut action_msgs__srv__CancelGoal_Request__Sequence;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__destroy(
        array: *mut action_msgs__srv__CancelGoal_Request__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__are_equal(
        lhs: *const action_msgs__srv__CancelGoal_Request__Sequence,
        rhs: *const action_msgs__srv__CancelGoal_Request__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Request__Sequence__copy(
        input: *const action_msgs__srv__CancelGoal_Request__Sequence,
        output: *mut action_msgs__srv__CancelGoal_Request__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__init(
        msg: *mut action_msgs__srv__CancelGoal_Response,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__fini(
        msg: *mut action_msgs__srv__CancelGoal_Response,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__create(
    ) -> *mut action_msgs__srv__CancelGoal_Response;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__destroy(
        msg: *mut action_msgs__srv__CancelGoal_Response,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__are_equal(
        lhs: *const action_msgs__srv__CancelGoal_Response,
        rhs: *const action_msgs__srv__CancelGoal_Response,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__copy(
        input: *const action_msgs__srv__CancelGoal_Response,
        output: *mut action_msgs__srv__CancelGoal_Response,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__init(
        array: *mut action_msgs__srv__CancelGoal_Response__Sequence,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__fini(
        array: *mut action_msgs__srv__CancelGoal_Response__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__create(
        size: usize,
    ) -> *mut action_msgs__srv__CancelGoal_Response__Sequence;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__destroy(
        array: *mut action_msgs__srv__CancelGoal_Response__Sequence,
    );
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__are_equal(
        lhs: *const action_msgs__srv__CancelGoal_Response__Sequence,
        rhs: *const action_msgs__srv__CancelGoal_Response__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn action_msgs__srv__CancelGoal_Response__Sequence__copy(
        input: *const action_msgs__srv__CancelGoal_Response__Sequence,
        output: *mut action_msgs__srv__CancelGoal_Response__Sequence,
    ) -> bool;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Request(
    ) -> *const rosidl_message_type_support_t;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response(
    ) -> *const rosidl_message_type_support_t;
}
extern "C" {
    pub fn rosidl_typesupport_c__get_service_type_support_handle__action_msgs__srv__CancelGoal(
    ) -> *const rosidl_service_type_support_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rosidl_action_type_support_t {
    pub goal_service_type_support: *const rosidl_service_type_support_t,
    pub result_service_type_support: *const rosidl_service_type_support_t,
    pub cancel_service_type_support: *const rosidl_service_type_support_t,
    pub feedback_message_type_support: *const rosidl_message_type_support_t,
    pub status_message_type_support: *const rosidl_message_type_support_t,
}
#[test]
fn bindgen_test_layout_rosidl_action_type_support_t() {
    const UNINIT: ::std::mem::MaybeUninit<rosidl_action_type_support_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rosidl_action_type_support_t>(),
        40usize,
        concat!("Size of: ", stringify!(rosidl_action_type_support_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rosidl_action_type_support_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rosidl_action_type_support_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_service_type_support) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_action_type_support_t),
            "::",
            stringify!(goal_service_type_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_service_type_support) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_action_type_support_t),
            "::",
            stringify!(result_service_type_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_service_type_support) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_action_type_support_t),
            "::",
            stringify!(cancel_service_type_support)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).feedback_message_type_support) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_action_type_support_t),
            "::",
            stringify!(feedback_message_type_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_message_type_support) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rosidl_action_type_support_t),
            "::",
            stringify!(status_message_type_support)
        )
    );
}
pub type rcl_action_goal_info_t = action_msgs__msg__GoalInfo;
pub type rcl_action_goal_status_t = action_msgs__msg__GoalStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_goal_status_array_s {
    pub msg: action_msgs__msg__GoalStatusArray,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_action_goal_status_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_goal_status_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_goal_status_array_s>(),
        64usize,
        concat!("Size of: ", stringify!(rcl_action_goal_status_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_goal_status_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_goal_status_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_goal_status_array_s),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_goal_status_array_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_action_goal_status_array_t = rcl_action_goal_status_array_s;
pub type rcl_action_cancel_request_t = action_msgs__srv__CancelGoal_Request;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_cancel_response_s {
    pub msg: action_msgs__srv__CancelGoal_Response,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_action_cancel_response_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_cancel_response_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_cancel_response_s>(),
        72usize,
        concat!("Size of: ", stringify!(rcl_action_cancel_response_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_cancel_response_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_cancel_response_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_cancel_response_s),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_cancel_response_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_action_cancel_response_t = rcl_action_cancel_response_s;
pub type rcl_action_goal_state_t = i8;
extern "C" {
    pub static mut goal_state_descriptions: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut goal_event_descriptions: [*const ::std::os::raw::c_char; 0usize];
}
pub const rcl_action_goal_event_e_GOAL_EVENT_EXECUTE: rcl_action_goal_event_e = 0;
pub const rcl_action_goal_event_e_GOAL_EVENT_CANCEL_GOAL: rcl_action_goal_event_e = 1;
pub const rcl_action_goal_event_e_GOAL_EVENT_SUCCEED: rcl_action_goal_event_e = 2;
pub const rcl_action_goal_event_e_GOAL_EVENT_ABORT: rcl_action_goal_event_e = 3;
pub const rcl_action_goal_event_e_GOAL_EVENT_CANCELED: rcl_action_goal_event_e = 4;
pub const rcl_action_goal_event_e_GOAL_EVENT_NUM_EVENTS: rcl_action_goal_event_e = 5;
pub type rcl_action_goal_event_e = ::std::os::raw::c_uint;
pub use self::rcl_action_goal_event_e as rcl_action_goal_event_t;
extern "C" {
    pub fn rcl_action_get_zero_initialized_goal_info() -> rcl_action_goal_info_t;
}
extern "C" {
    pub fn rcl_action_get_zero_initialized_goal_status_array() -> rcl_action_goal_status_array_t;
}
extern "C" {
    pub fn rcl_action_get_zero_initialized_cancel_request() -> rcl_action_cancel_request_t;
}
extern "C" {
    pub fn rcl_action_get_zero_initialized_cancel_response() -> rcl_action_cancel_response_t;
}
extern "C" {
    pub fn rcl_action_goal_status_array_init(
        status_array: *mut rcl_action_goal_status_array_t,
        num_status: usize,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_goal_status_array_fini(
        status_array: *mut rcl_action_goal_status_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_cancel_response_init(
        cancel_response: *mut rcl_action_cancel_response_t,
        num_goals_canceling: usize,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_cancel_response_fini(
        cancel_response: *mut rcl_action_cancel_response_t,
    ) -> rcl_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_client_impl_s {
    _unused: [u8; 0],
}
pub type rcl_action_client_impl_t = rcl_action_client_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_client_s {
    pub impl_: *mut rcl_action_client_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_action_client_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_client_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_client_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_action_client_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_client_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_client_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_action_client_t = rcl_action_client_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_client_options_s {
    pub goal_service_qos: rmw_qos_profile_t,
    pub result_service_qos: rmw_qos_profile_t,
    pub cancel_service_qos: rmw_qos_profile_t,
    pub feedback_topic_qos: rmw_qos_profile_t,
    pub status_topic_qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
}
#[test]
fn bindgen_test_layout_rcl_action_client_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_client_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_client_options_s>(),
        480usize,
        concat!("Size of: ", stringify!(rcl_action_client_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_client_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_client_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_service_qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(goal_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_service_qos) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(result_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_service_qos) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(cancel_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedback_topic_qos) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(feedback_topic_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_topic_qos) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(status_topic_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_client_options_s),
            "::",
            stringify!(allocator)
        )
    );
}
pub type rcl_action_client_options_t = rcl_action_client_options_s;
extern "C" {
    pub fn rcl_action_get_zero_initialized_client() -> rcl_action_client_t;
}
extern "C" {
    pub fn rcl_action_client_init(
        action_client: *mut rcl_action_client_t,
        node: *mut rcl_node_t,
        type_support: *const rosidl_action_type_support_t,
        action_name: *const ::std::os::raw::c_char,
        options: *const rcl_action_client_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_fini(
        action_client: *mut rcl_action_client_t,
        node: *mut rcl_node_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_get_default_options() -> rcl_action_client_options_t;
}
extern "C" {
    pub fn rcl_action_server_is_available(
        node: *const rcl_node_t,
        client: *const rcl_action_client_t,
        is_available: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_goal_request(
        action_client: *const rcl_action_client_t,
        ros_goal_request: *const ::std::os::raw::c_void,
        sequence_number: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_goal_response(
        action_client: *const rcl_action_client_t,
        response_header: *mut rmw_request_id_t,
        ros_goal_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_feedback(
        action_client: *const rcl_action_client_t,
        ros_feedback: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_status(
        action_client: *const rcl_action_client_t,
        ros_status_array: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_result_request(
        action_client: *const rcl_action_client_t,
        ros_result_request: *const ::std::os::raw::c_void,
        sequence_number: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_result_response(
        action_client: *const rcl_action_client_t,
        response_header: *mut rmw_request_id_t,
        ros_result: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_cancel_request(
        action_client: *const rcl_action_client_t,
        ros_cancel_request: *const ::std::os::raw::c_void,
        sequence_number: *mut i64,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_cancel_response(
        action_client: *const rcl_action_client_t,
        response_header: *mut rmw_request_id_t,
        ros_cancel_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_get_action_name(
        action_client: *const rcl_action_client_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_action_client_get_options(
        action_client: *const rcl_action_client_t,
    ) -> *const rcl_action_client_options_t;
}
extern "C" {
    pub fn rcl_action_client_is_valid(action_client: *const rcl_action_client_t) -> bool;
}
extern "C" {
    pub fn rcl_action_client_set_goal_client_callback(
        action_client: *const rcl_action_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_set_cancel_client_callback(
        action_client: *const rcl_action_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_set_result_client_callback(
        action_client: *const rcl_action_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_set_feedback_subscription_callback(
        action_client: *const rcl_action_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_set_status_subscription_callback(
        action_client: *const rcl_action_client_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_transition_goal_state(
        state: rcl_action_goal_state_t,
        event: rcl_action_goal_event_t,
    ) -> rcl_action_goal_state_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_goal_handle_impl_s {
    _unused: [u8; 0],
}
pub type rcl_action_goal_handle_impl_t = rcl_action_goal_handle_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_goal_handle_s {
    pub impl_: *mut rcl_action_goal_handle_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_action_goal_handle_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_goal_handle_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_goal_handle_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_action_goal_handle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_goal_handle_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_goal_handle_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_goal_handle_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_action_goal_handle_t = rcl_action_goal_handle_s;
extern "C" {
    pub fn rcl_action_get_zero_initialized_goal_handle() -> rcl_action_goal_handle_t;
}
extern "C" {
    pub fn rcl_action_goal_handle_init(
        goal_handle: *mut rcl_action_goal_handle_t,
        goal_info: *const rcl_action_goal_info_t,
        allocator: rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_goal_handle_fini(goal_handle: *mut rcl_action_goal_handle_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_update_goal_state(
        goal_handle: *mut rcl_action_goal_handle_t,
        goal_event: rcl_action_goal_event_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_goal_handle_get_info(
        goal_handle: *const rcl_action_goal_handle_t,
        goal_info: *mut rcl_action_goal_info_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_goal_handle_get_status(
        goal_handle: *const rcl_action_goal_handle_t,
        status: *mut rcl_action_goal_state_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_goal_handle_is_active(goal_handle: *const rcl_action_goal_handle_t) -> bool;
}
extern "C" {
    pub fn rcl_action_goal_handle_is_cancelable(
        goal_handle: *const rcl_action_goal_handle_t,
    ) -> bool;
}
extern "C" {
    pub fn rcl_action_goal_handle_is_valid(goal_handle: *const rcl_action_goal_handle_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_server_impl_s {
    _unused: [u8; 0],
}
pub type rcl_action_server_impl_t = rcl_action_server_impl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_server_s {
    pub impl_: *mut rcl_action_server_impl_t,
}
#[test]
fn bindgen_test_layout_rcl_action_server_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_server_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_server_s>(),
        8usize,
        concat!("Size of: ", stringify!(rcl_action_server_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_server_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_server_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_s),
            "::",
            stringify!(impl_)
        )
    );
}
pub type rcl_action_server_t = rcl_action_server_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcl_action_server_options_s {
    pub goal_service_qos: rmw_qos_profile_t,
    pub cancel_service_qos: rmw_qos_profile_t,
    pub result_service_qos: rmw_qos_profile_t,
    pub feedback_topic_qos: rmw_qos_profile_t,
    pub status_topic_qos: rmw_qos_profile_t,
    pub allocator: rcl_allocator_t,
    pub result_timeout: rcl_duration_t,
}
#[test]
fn bindgen_test_layout_rcl_action_server_options_s() {
    const UNINIT: ::std::mem::MaybeUninit<rcl_action_server_options_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rcl_action_server_options_s>(),
        488usize,
        concat!("Size of: ", stringify!(rcl_action_server_options_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rcl_action_server_options_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rcl_action_server_options_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goal_service_qos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(goal_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_service_qos) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(cancel_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_service_qos) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(result_service_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedback_topic_qos) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(feedback_topic_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_topic_qos) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(status_topic_qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_timeout) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(rcl_action_server_options_s),
            "::",
            stringify!(result_timeout)
        )
    );
}
pub type rcl_action_server_options_t = rcl_action_server_options_s;
extern "C" {
    pub fn rcl_action_get_zero_initialized_server() -> rcl_action_server_t;
}
extern "C" {
    pub fn rcl_action_server_init(
        action_server: *mut rcl_action_server_t,
        node: *mut rcl_node_t,
        clock: *mut rcl_clock_t,
        type_support: *const rosidl_action_type_support_t,
        action_name: *const ::std::os::raw::c_char,
        options: *const rcl_action_server_options_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_fini(
        action_server: *mut rcl_action_server_t,
        node: *mut rcl_node_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_get_default_options() -> rcl_action_server_options_t;
}
extern "C" {
    pub fn rcl_action_take_goal_request(
        action_server: *const rcl_action_server_t,
        request_header: *mut rmw_request_id_t,
        ros_goal_request: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_goal_response(
        action_server: *const rcl_action_server_t,
        response_header: *mut rmw_request_id_t,
        ros_goal_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_accept_new_goal(
        action_server: *mut rcl_action_server_t,
        goal_info: *const rcl_action_goal_info_t,
    ) -> *mut rcl_action_goal_handle_t;
}
extern "C" {
    pub fn rcl_action_publish_feedback(
        action_server: *const rcl_action_server_t,
        ros_feedback: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_get_goal_status_array(
        action_server: *const rcl_action_server_t,
        status_message: *mut rcl_action_goal_status_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_publish_status(
        action_server: *const rcl_action_server_t,
        status_message: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_result_request(
        action_server: *const rcl_action_server_t,
        request_header: *mut rmw_request_id_t,
        ros_result_request: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_result_response(
        action_server: *const rcl_action_server_t,
        response_header: *mut rmw_request_id_t,
        ros_result_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_expire_goals(
        action_server: *const rcl_action_server_t,
        expired_goals: *mut rcl_action_goal_info_t,
        expired_goals_capacity: usize,
        num_expired: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_notify_goal_done(action_server: *const rcl_action_server_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_take_cancel_request(
        action_server: *const rcl_action_server_t,
        request_header: *mut rmw_request_id_t,
        ros_cancel_request: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_process_cancel_request(
        action_server: *const rcl_action_server_t,
        cancel_request: *const rcl_action_cancel_request_t,
        cancel_response: *mut rcl_action_cancel_response_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_send_cancel_response(
        action_server: *const rcl_action_server_t,
        response_header: *mut rmw_request_id_t,
        ros_cancel_response: *mut ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_get_action_name(
        action_server: *const rcl_action_server_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rcl_action_server_get_options(
        action_server: *const rcl_action_server_t,
    ) -> *const rcl_action_server_options_t;
}
extern "C" {
    pub fn rcl_action_server_get_goal_handles(
        action_server: *const rcl_action_server_t,
        goal_handles: *mut *mut *mut rcl_action_goal_handle_t,
        num_goals: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_goal_exists(
        action_server: *const rcl_action_server_t,
        goal_info: *const rcl_action_goal_info_t,
    ) -> bool;
}
extern "C" {
    pub fn rcl_action_server_is_valid(action_server: *const rcl_action_server_t) -> bool;
}
extern "C" {
    pub fn rcl_action_server_is_valid_except_context(
        action_server: *const rcl_action_server_t,
    ) -> bool;
}
extern "C" {
    pub fn rcl_action_server_set_goal_service_callback(
        action_server: *const rcl_action_server_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_set_cancel_service_callback(
        action_server: *const rcl_action_server_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_set_result_service_callback(
        action_server: *const rcl_action_server_t,
        callback: rcl_event_callback_t,
        user_data: *const ::std::os::raw::c_void,
    ) -> rcl_ret_t;
}
extern "C" {
    pub static rcl_action_qos_profile_status_default: rmw_qos_profile_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_names_and_types_s {
    pub names: rcutils_string_array_t,
    pub types: *mut rcutils_string_array_t,
}
#[test]
fn bindgen_test_layout_rmw_names_and_types_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_names_and_types_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_names_and_types_s>(),
        64usize,
        concat!("Size of: ", stringify!(rmw_names_and_types_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_names_and_types_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_names_and_types_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_names_and_types_s),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_names_and_types_s),
            "::",
            stringify!(types)
        )
    );
}
pub type rmw_names_and_types_t = rmw_names_and_types_s;
extern "C" {
    pub fn rmw_get_zero_initialized_names_and_types() -> rmw_names_and_types_t;
}
extern "C" {
    pub fn rmw_names_and_types_check_zero(names_and_types: *mut rmw_names_and_types_t)
        -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_names_and_types_init(
        names_and_types: *mut rmw_names_and_types_t,
        size: usize,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_names_and_types_fini(names_and_types: *mut rmw_names_and_types_t) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_get_topic_names_and_types(
        node: *const rmw_node_t,
        allocator: *mut rcutils_allocator_t,
        no_demangle: bool,
        topic_names_and_types: *mut rmw_names_and_types_t,
    ) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_topic_endpoint_info_s {
    pub node_name: *const ::std::os::raw::c_char,
    pub node_namespace: *const ::std::os::raw::c_char,
    pub topic_type: *const ::std::os::raw::c_char,
    pub endpoint_type: rmw_endpoint_type_t,
    pub endpoint_gid: [u8; 24usize],
    pub qos_profile: rmw_qos_profile_t,
}
#[test]
fn bindgen_test_layout_rmw_topic_endpoint_info_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_topic_endpoint_info_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_topic_endpoint_info_s>(),
        144usize,
        concat!("Size of: ", stringify!(rmw_topic_endpoint_info_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_topic_endpoint_info_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_topic_endpoint_info_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(node_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_namespace) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(node_namespace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topic_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(topic_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(endpoint_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint_gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(endpoint_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos_profile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_s),
            "::",
            stringify!(qos_profile)
        )
    );
}
pub type rmw_topic_endpoint_info_t = rmw_topic_endpoint_info_s;
extern "C" {
    pub fn rmw_get_zero_initialized_topic_endpoint_info() -> rmw_topic_endpoint_info_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_fini(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_topic_type(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        topic_type: *const ::std::os::raw::c_char,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_node_name(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        node_name: *const ::std::os::raw::c_char,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_node_namespace(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        node_namespace: *const ::std::os::raw::c_char,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_endpoint_type(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        type_: rmw_endpoint_type_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_gid(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        gid: *const u8,
        size: usize,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_set_qos_profile(
        topic_endpoint_info: *mut rmw_topic_endpoint_info_t,
        qos_profile: *const rmw_qos_profile_t,
    ) -> rmw_ret_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmw_topic_endpoint_info_array_s {
    pub size: usize,
    pub info_array: *mut rmw_topic_endpoint_info_t,
}
#[test]
fn bindgen_test_layout_rmw_topic_endpoint_info_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<rmw_topic_endpoint_info_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmw_topic_endpoint_info_array_s>(),
        16usize,
        concat!("Size of: ", stringify!(rmw_topic_endpoint_info_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<rmw_topic_endpoint_info_array_s>(),
        8usize,
        concat!("Alignment of ", stringify!(rmw_topic_endpoint_info_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_array_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmw_topic_endpoint_info_array_s),
            "::",
            stringify!(info_array)
        )
    );
}
pub type rmw_topic_endpoint_info_array_t = rmw_topic_endpoint_info_array_s;
extern "C" {
    pub fn rmw_get_zero_initialized_topic_endpoint_info_array() -> rmw_topic_endpoint_info_array_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_array_check_zero(
        topic_endpoint_info_array: *mut rmw_topic_endpoint_info_array_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_array_init_with_size(
        topic_endpoint_info_array: *mut rmw_topic_endpoint_info_array_t,
        size: usize,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
extern "C" {
    pub fn rmw_topic_endpoint_info_array_fini(
        topic_endpoint_info_array: *mut rmw_topic_endpoint_info_array_t,
        allocator: *mut rcutils_allocator_t,
    ) -> rmw_ret_t;
}
pub type rcl_names_and_types_t = rmw_names_and_types_t;
pub type rcl_topic_endpoint_info_t = rmw_topic_endpoint_info_t;
pub type rcl_topic_endpoint_info_array_t = rmw_topic_endpoint_info_array_t;
extern "C" {
    pub fn rcl_get_publisher_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        no_demangle: bool,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        topic_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_subscriber_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        no_demangle: bool,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        topic_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_service_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        service_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_client_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        service_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_topic_names_and_types(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        no_demangle: bool,
        topic_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_service_names_and_types(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        service_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_names_and_types_init(
        names_and_types: *mut rcl_names_and_types_t,
        size: usize,
        allocator: *mut rcl_allocator_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_names_and_types_fini(names_and_types: *mut rcl_names_and_types_t) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_node_names(
        node: *const rcl_node_t,
        allocator: rcl_allocator_t,
        node_names: *mut rcutils_string_array_t,
        node_namespaces: *mut rcutils_string_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_node_names_with_enclaves(
        node: *const rcl_node_t,
        allocator: rcl_allocator_t,
        node_names: *mut rcutils_string_array_t,
        node_namespaces: *mut rcutils_string_array_t,
        enclaves: *mut rcutils_string_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_count_publishers(
        node: *const rcl_node_t,
        topic_name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_count_subscribers(
        node: *const rcl_node_t,
        topic_name: *const ::std::os::raw::c_char,
        count: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_for_publishers(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        topic_name: *const ::std::os::raw::c_char,
        count: usize,
        timeout: rcutils_duration_value_t,
        success: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_wait_for_subscribers(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        topic_name: *const ::std::os::raw::c_char,
        count: usize,
        timeout: rcutils_duration_value_t,
        success: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_publishers_info_by_topic(
        node: *const rcl_node_t,
        allocator: *mut rcutils_allocator_t,
        topic_name: *const ::std::os::raw::c_char,
        no_mangle: bool,
        publishers_info: *mut rcl_topic_endpoint_info_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_get_subscriptions_info_by_topic(
        node: *const rcl_node_t,
        allocator: *mut rcutils_allocator_t,
        topic_name: *const ::std::os::raw::c_char,
        no_mangle: bool,
        subscriptions_info: *mut rcl_topic_endpoint_info_array_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_service_server_is_available(
        node: *const rcl_node_t,
        client: *const rcl_client_t,
        is_available: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_get_client_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        action_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_get_server_names_and_types_by_node(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        node_name: *const ::std::os::raw::c_char,
        node_namespace: *const ::std::os::raw::c_char,
        action_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_get_names_and_types(
        node: *const rcl_node_t,
        allocator: *mut rcl_allocator_t,
        action_names_and_types: *mut rcl_names_and_types_t,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_wait_set_add_action_client(
        wait_set: *mut rcl_wait_set_t,
        action_client: *const rcl_action_client_t,
        client_index: *mut usize,
        subscription_index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_wait_set_add_action_server(
        wait_set: *mut rcl_wait_set_t,
        action_server: *const rcl_action_server_t,
        service_index: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_wait_set_get_num_entities(
        action_client: *const rcl_action_client_t,
        num_subscriptions: *mut usize,
        num_guard_conditions: *mut usize,
        num_timers: *mut usize,
        num_clients: *mut usize,
        num_services: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_wait_set_get_num_entities(
        action_server: *const rcl_action_server_t,
        num_subscriptions: *mut usize,
        num_guard_conditions: *mut usize,
        num_timers: *mut usize,
        num_clients: *mut usize,
        num_services: *mut usize,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_client_wait_set_get_entities_ready(
        wait_set: *const rcl_wait_set_t,
        action_client: *const rcl_action_client_t,
        is_feedback_ready: *mut bool,
        is_status_ready: *mut bool,
        is_goal_response_ready: *mut bool,
        is_cancel_response_ready: *mut bool,
        is_result_response_ready: *mut bool,
    ) -> rcl_ret_t;
}
extern "C" {
    pub fn rcl_action_server_wait_set_get_entities_ready(
        wait_set: *const rcl_wait_set_t,
        action_server: *const rcl_action_server_t,
        is_goal_request_ready: *mut bool,
        is_cancel_request_ready: *mut bool,
        is_result_request_ready: *mut bool,
        is_goal_expired: *mut bool,
    ) -> rcl_ret_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
