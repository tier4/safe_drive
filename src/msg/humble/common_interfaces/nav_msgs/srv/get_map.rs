// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::super::*;
use super::super::*;
use crate::msg::common_interfaces::*;
use crate::msg::*;
use crate::rcl;

extern "C" {
    fn nav_msgs__srv__GetMap_Request__init(msg: *mut GetMapRequest) -> bool;
    fn nav_msgs__srv__GetMap_Request__fini(msg: *mut GetMapRequest);
    fn nav_msgs__srv__GetMap_Request__Sequence__init(
        msg: *mut GetMapRequestSeqRaw,
        size: usize,
    ) -> bool;
    fn nav_msgs__srv__GetMap_Request__Sequence__fini(msg: *mut GetMapRequestSeqRaw);
    fn nav_msgs__srv__GetMap_Response__init(msg: *mut GetMapResponse) -> bool;
    fn nav_msgs__srv__GetMap_Response__fini(msg: *mut GetMapResponse);
    fn nav_msgs__srv__GetMap_Response__Sequence__init(
        msg: *mut GetMapResponseSeqRaw,
        size: usize,
    ) -> bool;
    fn nav_msgs__srv__GetMap_Response__Sequence__fini(msg: *mut GetMapResponseSeqRaw);
    fn rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetMap(
    ) -> *const rcl::rosidl_service_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetMap_Request(
    ) -> *const rcl::rosidl_message_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetMap_Response(
    ) -> *const rcl::rosidl_message_type_support_t;
}

#[repr(C)]
#[derive(Debug)]
pub struct GetMapRequest {
    _unused: u8,
}

#[repr(C)]
#[derive(Debug)]
pub struct GetMapResponse {
    pub map: OccupancyGrid,
}

impl GetMapRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetMap_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetMapRequest {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetMap_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetMapRequestSeqRaw {
    data: *mut GetMapRequest,
    size: usize,
    capacity: usize,
}

/// Sequence of GetMapRequest.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetMapRequestSeq<const N: usize> {
    data: *mut GetMapRequest,
    size: usize,
    capacity: usize,
}

impl<const N: usize> GetMapRequestSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetMapRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetMap_Request__Sequence__init(&mut msg, size) } {
            Some(Self {
                data: msg.data,
                size: msg.size,
                capacity: msg.capacity,
            })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetMapRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {
            data: msg.data,
            size: msg.size,
            capacity: msg.capacity,
        }
    }

    pub fn as_slice(&self) -> &[GetMapRequest] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetMapRequest] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetMapRequest> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetMapRequest> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetMapRequestSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetMapRequestSeqRaw {
            data: self.data,
            size: self.size,
            capacity: self.capacity,
        };
        unsafe { nav_msgs__srv__GetMap_Request__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetMapRequestSeq<N> {}
unsafe impl<const N: usize> Sync for GetMapRequestSeq<N> {}

impl GetMapResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetMap_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetMapResponse {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__GetMap_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetMapResponseSeqRaw {
    data: *mut GetMapResponse,
    size: usize,
    capacity: usize,
}

/// Sequence of GetMapResponse.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetMapResponseSeq<const N: usize> {
    data: *mut GetMapResponse,
    size: usize,
    capacity: usize,
}

impl<const N: usize> GetMapResponseSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetMapResponseSeqRaw =
            unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__GetMap_Response__Sequence__init(&mut msg, size) } {
            Some(Self {
                data: msg.data,
                size: msg.size,
                capacity: msg.capacity,
            })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetMapResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {
            data: msg.data,
            size: msg.size,
            capacity: msg.capacity,
        }
    }

    pub fn as_slice(&self) -> &[GetMapResponse] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetMapResponse] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetMapResponse> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetMapResponse> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetMapResponseSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetMapResponseSeqRaw {
            data: self.data,
            size: self.size,
            capacity: self.capacity,
        };
        unsafe { nav_msgs__srv__GetMap_Response__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetMapResponseSeq<N> {}
unsafe impl<const N: usize> Sync for GetMapResponseSeq<N> {}

pub struct GetMap;

impl ServiceMsg for GetMap {
    type Request = GetMapRequest;
    type Response = GetMapResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe { rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetMap() }
    }
}

impl TypeSupport for GetMapRequest {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetMap_Request()
        }
    }
}

impl TypeSupport for GetMapResponse {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetMap_Response()
        }
    }
}
