// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::super::*;
use super::super::*;
use crate::msg::common_interfaces::*;
use crate::msg::*;
use crate::rcl;

extern "C" {
    fn nav_msgs__srv__SetMap_Request__init(msg: *mut SetMapRequest) -> bool;
    fn nav_msgs__srv__SetMap_Request__fini(msg: *mut SetMapRequest);
    fn nav_msgs__srv__SetMap_Request__Sequence__init(
        msg: *mut SetMapRequestSeqRaw,
        size: usize,
    ) -> bool;
    fn nav_msgs__srv__SetMap_Request__Sequence__fini(msg: *mut SetMapRequestSeqRaw);
    fn nav_msgs__srv__SetMap_Response__init(msg: *mut SetMapResponse) -> bool;
    fn nav_msgs__srv__SetMap_Response__fini(msg: *mut SetMapResponse);
    fn nav_msgs__srv__SetMap_Response__Sequence__init(
        msg: *mut SetMapResponseSeqRaw,
        size: usize,
    ) -> bool;
    fn nav_msgs__srv__SetMap_Response__Sequence__fini(msg: *mut SetMapResponseSeqRaw);
    fn rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__SetMap(
    ) -> *const rcl::rosidl_service_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__SetMap_Request(
    ) -> *const rcl::rosidl_message_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__SetMap_Response(
    ) -> *const rcl::rosidl_message_type_support_t;
}

#[repr(C)]
#[derive(Debug)]
pub struct SetMapRequest {
    pub map: OccupancyGrid,
    pub initial_pose: geometry_msgs::msg::PoseWithCovarianceStamped,
}

#[repr(C)]
#[derive(Debug)]
pub struct SetMapResponse {
    pub success: bool,
}

impl SetMapRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__SetMap_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SetMapRequest {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__SetMap_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct SetMapRequestSeqRaw {
    data: *mut SetMapRequest,
    size: usize,
    capacity: usize,
}

/// Sequence of SetMapRequest.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct SetMapRequestSeq<const N: usize> {
    data: *mut SetMapRequest,
    size: usize,
    capacity: usize,
}

impl<const N: usize> SetMapRequestSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: SetMapRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__SetMap_Request__Sequence__init(&mut msg, size) } {
            Some(Self {
                data: msg.data,
                size: msg.size,
                capacity: msg.capacity,
            })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: SetMapRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {
            data: msg.data,
            size: msg.size,
            capacity: msg.capacity,
        }
    }

    pub fn as_slice(&self) -> &[SetMapRequest] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [SetMapRequest] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, SetMapRequest> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, SetMapRequest> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for SetMapRequestSeq<N> {
    fn drop(&mut self) {
        let mut msg = SetMapRequestSeqRaw {
            data: self.data,
            size: self.size,
            capacity: self.capacity,
        };
        unsafe { nav_msgs__srv__SetMap_Request__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for SetMapRequestSeq<N> {}
unsafe impl<const N: usize> Sync for SetMapRequestSeq<N> {}

impl SetMapResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__SetMap_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for SetMapResponse {
    fn drop(&mut self) {
        unsafe { nav_msgs__srv__SetMap_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct SetMapResponseSeqRaw {
    data: *mut SetMapResponse,
    size: usize,
    capacity: usize,
}

/// Sequence of SetMapResponse.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct SetMapResponseSeq<const N: usize> {
    data: *mut SetMapResponse,
    size: usize,
    capacity: usize,
}

impl<const N: usize> SetMapResponseSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size >= N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: SetMapResponseSeqRaw =
            unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { nav_msgs__srv__SetMap_Response__Sequence__init(&mut msg, size) } {
            Some(Self {
                data: msg.data,
                size: msg.size,
                capacity: msg.capacity,
            })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: SetMapResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {
            data: msg.data,
            size: msg.size,
            capacity: msg.capacity,
        }
    }

    pub fn as_slice(&self) -> &[SetMapResponse] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [SetMapResponse] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, SetMapResponse> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, SetMapResponse> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for SetMapResponseSeq<N> {
    fn drop(&mut self) {
        let mut msg = SetMapResponseSeqRaw {
            data: self.data,
            size: self.size,
            capacity: self.capacity,
        };
        unsafe { nav_msgs__srv__SetMap_Response__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for SetMapResponseSeq<N> {}
unsafe impl<const N: usize> Sync for SetMapResponseSeq<N> {}

pub struct SetMap;

impl ServiceMsg for SetMap {
    type Request = SetMapRequest;
    type Response = SetMapResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe { rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__SetMap() }
    }
}

impl TypeSupport for SetMapRequest {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__SetMap_Request()
        }
    }
}

impl TypeSupport for SetMapResponse {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__SetMap_Response()
        }
    }
}
