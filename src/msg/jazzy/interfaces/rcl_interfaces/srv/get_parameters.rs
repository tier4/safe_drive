// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn rcl_interfaces__srv__GetParameters_Request__init(msg: *mut GetParametersRequest) -> bool;
    fn rcl_interfaces__srv__GetParameters_Request__fini(msg: *mut GetParametersRequest);
    fn rcl_interfaces__srv__GetParameters_Request__Sequence__init(msg: *mut GetParametersRequestSeqRaw, size: usize) -> bool;
    fn rcl_interfaces__srv__GetParameters_Request__Sequence__fini(msg: *mut GetParametersRequestSeqRaw);
    fn rcl_interfaces__srv__GetParameters_Response__init(msg: *mut GetParametersResponse) -> bool;
    fn rcl_interfaces__srv__GetParameters_Response__fini(msg: *mut GetParametersResponse);
    fn rcl_interfaces__srv__GetParameters_Response__Sequence__init(msg: *mut GetParametersResponseSeqRaw, size: usize) -> bool;
    fn rcl_interfaces__srv__GetParameters_Response__Sequence__fini(msg: *mut GetParametersResponseSeqRaw);
    fn rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters() -> *const rcl::rosidl_service_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request() -> *const rcl::rosidl_message_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct GetParametersRequest {
    pub names: crate::msg::RosStringSeq<0, 0>,
}

#[repr(C)]
#[derive(Debug)]
pub struct GetParametersResponse {
    pub values: ParameterValueSeq<0>,
}

impl GetParametersRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { rcl_interfaces__srv__GetParameters_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetParametersRequest {
    fn drop(&mut self) {
        unsafe { rcl_interfaces__srv__GetParameters_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetParametersRequestSeqRaw {
    data: *mut GetParametersRequest,
    size: size_t,
    capacity: size_t,
}

/// Sequence of GetParametersRequest.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetParametersRequestSeq<const N: usize> {
    data: *mut GetParametersRequest,
    size: size_t,
    capacity: size_t,
}

impl<const N: usize> GetParametersRequestSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size > N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetParametersRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { rcl_interfaces__srv__GetParameters_Request__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetParametersRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {data: msg.data, size: msg.size, capacity: msg.capacity }
    }

    pub fn as_slice(&self) -> &[GetParametersRequest] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size as _) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetParametersRequest] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size as _) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetParametersRequest> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetParametersRequest> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetParametersRequestSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetParametersRequestSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { rcl_interfaces__srv__GetParameters_Request__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetParametersRequestSeq<N> {}
unsafe impl<const N: usize> Sync for GetParametersRequestSeq<N> {}


impl GetParametersResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { rcl_interfaces__srv__GetParameters_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetParametersResponse {
    fn drop(&mut self) {
        unsafe { rcl_interfaces__srv__GetParameters_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetParametersResponseSeqRaw {
    data: *mut GetParametersResponse,
    size: size_t,
    capacity: size_t,
}

/// Sequence of GetParametersResponse.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetParametersResponseSeq<const N: usize> {
    data: *mut GetParametersResponse,
    size: size_t,
    capacity: size_t,
}

impl<const N: usize> GetParametersResponseSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size > N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetParametersResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { rcl_interfaces__srv__GetParameters_Response__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetParametersResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {data: msg.data, size: msg.size, capacity: msg.capacity }
    }

    pub fn as_slice(&self) -> &[GetParametersResponse] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size as _) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetParametersResponse] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size as _) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetParametersResponse> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetParametersResponse> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetParametersResponseSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetParametersResponseSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { rcl_interfaces__srv__GetParameters_Response__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetParametersResponseSeq<N> {}
unsafe impl<const N: usize> Sync for GetParametersResponseSeq<N> {}


pub struct GetParameters;

impl ServiceMsg for GetParameters {
    type Request = GetParametersRequest;
    type Response = GetParametersResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters()
        }
    }
}

impl TypeSupport for GetParametersRequest {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request()
        }
    }
}

impl TypeSupport for GetParametersResponse {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response()
        }
    }
}

