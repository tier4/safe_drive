// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
use crate::msg::common_interfaces::*;

extern "C" {
    fn lifecycle_msgs__srv__GetAvailableTransitions_Request__init(msg: *mut GetAvailableTransitionsRequest) -> bool;
    fn lifecycle_msgs__srv__GetAvailableTransitions_Request__fini(msg: *mut GetAvailableTransitionsRequest);
    fn lifecycle_msgs__srv__GetAvailableTransitions_Request__Sequence__init(msg: *mut GetAvailableTransitionsRequestSeqRaw, size: usize) -> bool;
    fn lifecycle_msgs__srv__GetAvailableTransitions_Request__Sequence__fini(msg: *mut GetAvailableTransitionsRequestSeqRaw);
    fn lifecycle_msgs__srv__GetAvailableTransitions_Response__init(msg: *mut GetAvailableTransitionsResponse) -> bool;
    fn lifecycle_msgs__srv__GetAvailableTransitions_Response__fini(msg: *mut GetAvailableTransitionsResponse);
    fn lifecycle_msgs__srv__GetAvailableTransitions_Response__Sequence__init(msg: *mut GetAvailableTransitionsResponseSeqRaw, size: usize) -> bool;
    fn lifecycle_msgs__srv__GetAvailableTransitions_Response__Sequence__fini(msg: *mut GetAvailableTransitionsResponseSeqRaw);
    fn rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions() -> *const rcl::rosidl_service_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Request() -> *const rcl::rosidl_message_type_support_t;
    fn rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Response() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct GetAvailableTransitionsRequest {
    _unused: u8
}

#[repr(C)]
#[derive(Debug)]
pub struct GetAvailableTransitionsResponse {
    pub available_transitions: TransitionDescriptionSeq<0>,
}

impl GetAvailableTransitionsRequest {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Request__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetAvailableTransitionsRequest {
    fn drop(&mut self) {
        unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Request__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetAvailableTransitionsRequestSeqRaw {
    data: *mut GetAvailableTransitionsRequest,
    size: size_t,
    capacity: size_t,
}

/// Sequence of GetAvailableTransitionsRequest.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetAvailableTransitionsRequestSeq<const N: usize> {
    data: *mut GetAvailableTransitionsRequest,
    size: size_t,
    capacity: size_t,
}

impl<const N: usize> GetAvailableTransitionsRequestSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size > N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetAvailableTransitionsRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Request__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetAvailableTransitionsRequestSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {data: msg.data, size: msg.size, capacity: msg.capacity }
    }

    pub fn as_slice(&self) -> &[GetAvailableTransitionsRequest] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size as _) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetAvailableTransitionsRequest] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size as _) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetAvailableTransitionsRequest> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetAvailableTransitionsRequest> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetAvailableTransitionsRequestSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetAvailableTransitionsRequestSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Request__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetAvailableTransitionsRequestSeq<N> {}
unsafe impl<const N: usize> Sync for GetAvailableTransitionsRequestSeq<N> {}


impl GetAvailableTransitionsResponse {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Response__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for GetAvailableTransitionsResponse {
    fn drop(&mut self) {
        unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Response__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct GetAvailableTransitionsResponseSeqRaw {
    data: *mut GetAvailableTransitionsResponse,
    size: size_t,
    capacity: size_t,
}

/// Sequence of GetAvailableTransitionsResponse.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct GetAvailableTransitionsResponseSeq<const N: usize> {
    data: *mut GetAvailableTransitionsResponse,
    size: size_t,
    capacity: size_t,
}

impl<const N: usize> GetAvailableTransitionsResponseSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size > N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: GetAvailableTransitionsResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Response__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: GetAvailableTransitionsResponseSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {data: msg.data, size: msg.size, capacity: msg.capacity }
    }

    pub fn as_slice(&self) -> &[GetAvailableTransitionsResponse] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size as _) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [GetAvailableTransitionsResponse] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size as _) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, GetAvailableTransitionsResponse> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, GetAvailableTransitionsResponse> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for GetAvailableTransitionsResponseSeq<N> {
    fn drop(&mut self) {
        let mut msg = GetAvailableTransitionsResponseSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { lifecycle_msgs__srv__GetAvailableTransitions_Response__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for GetAvailableTransitionsResponseSeq<N> {}
unsafe impl<const N: usize> Sync for GetAvailableTransitionsResponseSeq<N> {}


pub struct GetAvailableTransitions;

impl ServiceMsg for GetAvailableTransitions {
    type Request = GetAvailableTransitionsRequest;
    type Response = GetAvailableTransitionsResponse;
    fn type_support() -> *const rcl::rosidl_service_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions()
        }
    }
}

impl TypeSupport for GetAvailableTransitionsRequest {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Request()
        }
    }
}

impl TypeSupport for GetAvailableTransitionsResponse {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Response()
        }
    }
}

