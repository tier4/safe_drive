// This file was automatically generated by ros2msg_to_rs (https://github.com/tier4/ros2msg_to_rs).
use super::*;
use super::super::super::*;
use crate::msg::*;
use crate::rcl;
pub const TRANSITION_CREATE: u8 = 0;
pub const TRANSITION_CONFIGURE: u8 = 1;
pub const TRANSITION_CLEANUP: u8 = 2;
pub const TRANSITION_ACTIVATE: u8 = 3;
pub const TRANSITION_DEACTIVATE: u8 = 4;
pub const TRANSITION_UNCONFIGURED_SHUTDOWN: u8 = 5;
pub const TRANSITION_INACTIVE_SHUTDOWN: u8 = 6;
pub const TRANSITION_ACTIVE_SHUTDOWN: u8 = 7;
pub const TRANSITION_DESTROY: u8 = 8;
pub const TRANSITION_ON_CONFIGURE_SUCCESS: u8 = 10;
pub const TRANSITION_ON_CONFIGURE_FAILURE: u8 = 11;
pub const TRANSITION_ON_CONFIGURE_ERROR: u8 = 12;
pub const TRANSITION_ON_CLEANUP_SUCCESS: u8 = 20;
pub const TRANSITION_ON_CLEANUP_FAILURE: u8 = 21;
pub const TRANSITION_ON_CLEANUP_ERROR: u8 = 22;
pub const TRANSITION_ON_ACTIVATE_SUCCESS: u8 = 30;
pub const TRANSITION_ON_ACTIVATE_FAILURE: u8 = 31;
pub const TRANSITION_ON_ACTIVATE_ERROR: u8 = 32;
pub const TRANSITION_ON_DEACTIVATE_SUCCESS: u8 = 40;
pub const TRANSITION_ON_DEACTIVATE_FAILURE: u8 = 41;
pub const TRANSITION_ON_DEACTIVATE_ERROR: u8 = 42;
pub const TRANSITION_ON_SHUTDOWN_SUCCESS: u8 = 50;
pub const TRANSITION_ON_SHUTDOWN_FAILURE: u8 = 51;
pub const TRANSITION_ON_SHUTDOWN_ERROR: u8 = 52;
pub const TRANSITION_ON_ERROR_SUCCESS: u8 = 60;
pub const TRANSITION_ON_ERROR_FAILURE: u8 = 61;
pub const TRANSITION_ON_ERROR_ERROR: u8 = 62;
pub const TRANSITION_CALLBACK_SUCCESS: u8 = 97;
pub const TRANSITION_CALLBACK_FAILURE: u8 = 98;
pub const TRANSITION_CALLBACK_ERROR: u8 = 99;

extern "C" {
    fn lifecycle_msgs__msg__Transition__init(msg: *mut Transition) -> bool;
    fn lifecycle_msgs__msg__Transition__fini(msg: *mut Transition);
    fn lifecycle_msgs__msg__Transition__are_equal(lhs: *const Transition, rhs: *const Transition) -> bool;
    fn lifecycle_msgs__msg__Transition__Sequence__init(msg: *mut TransitionSeqRaw, size: usize) -> bool;
    fn lifecycle_msgs__msg__Transition__Sequence__fini(msg: *mut TransitionSeqRaw);
    fn lifecycle_msgs__msg__Transition__Sequence__are_equal(lhs: *const TransitionSeqRaw, rhs: *const TransitionSeqRaw) -> bool;
    fn rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__Transition() -> *const rcl::rosidl_message_type_support_t;
}


#[repr(C)]
#[derive(Debug)]
pub struct Transition {
    pub id: u8,
    pub label: crate::msg::RosString<0>,
}

impl Transition {
    pub fn new() -> Option<Self> {
        let mut msg: Self = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__msg__Transition__init(&mut msg) } {
            Some(msg)
        } else {
            None
        }
    }
}

impl Drop for Transition {
    fn drop(&mut self) {
        unsafe { lifecycle_msgs__msg__Transition__fini(self) };
    }
}

#[repr(C)]
#[derive(Debug)]
struct TransitionSeqRaw {
    data: *mut Transition,
    size: size_t,
    capacity: size_t,
}

/// Sequence of Transition.
/// `N` is the maximum number of elements.
/// If `N` is `0`, the size is unlimited.
#[repr(C)]
#[derive(Debug)]
pub struct TransitionSeq<const N: usize> {
    data: *mut Transition,
    size: size_t,
    capacity: size_t,
}

impl<const N: usize> TransitionSeq<N> {
    /// Create a sequence of.
    /// `N` represents the maximum number of elements.
    /// If `N` is `0`, the sequence is unlimited.
    pub fn new(size: usize) -> Option<Self> {
        if N != 0 && size > N {
            // the size exceeds in the maximum number
            return None;
        }

        let mut msg: TransitionSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        if unsafe { lifecycle_msgs__msg__Transition__Sequence__init(&mut msg, size) } {
            Some(Self {data: msg.data, size: msg.size, capacity: msg.capacity })
        } else {
            None
        }
    }

    pub fn null() -> Self {
        let msg: TransitionSeqRaw = unsafe { std::mem::MaybeUninit::zeroed().assume_init() };
        Self {data: msg.data, size: msg.size, capacity: msg.capacity }
    }

    pub fn as_slice(&self) -> &[Transition] {
        if self.data.is_null() {
            &[]
        } else {
            let s = unsafe { std::slice::from_raw_parts(self.data, self.size as _) };
            s
        }
    }

    pub fn as_slice_mut(&mut self) -> &mut [Transition] {
        if self.data.is_null() {
            &mut []
        } else {
            let s = unsafe { std::slice::from_raw_parts_mut(self.data, self.size as _) };
            s
        }
    }

    pub fn iter(&self) -> std::slice::Iter<'_, Transition> {
        self.as_slice().iter()
    }

    pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, Transition> {
        self.as_slice_mut().iter_mut()
    }

    pub fn len(&self) -> usize {
        self.as_slice().len()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

impl<const N: usize> Drop for TransitionSeq<N> {
    fn drop(&mut self) {
        let mut msg = TransitionSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
        unsafe { lifecycle_msgs__msg__Transition__Sequence__fini(&mut msg) };
    }
}

unsafe impl<const N: usize> Send for TransitionSeq<N> {}
unsafe impl<const N: usize> Sync for TransitionSeq<N> {}


impl TypeSupport for Transition {
    fn type_support() -> *const rcl::rosidl_message_type_support_t {
        unsafe {
            rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__Transition()
        }
    }
}

impl PartialEq for Transition {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            lifecycle_msgs__msg__Transition__are_equal(self, other)
        }
    }
}

impl<const N: usize> PartialEq for TransitionSeq<N> {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            let msg1 = TransitionSeqRaw{data: self.data, size: self.size, capacity: self.capacity};
            let msg2 = TransitionSeqRaw{data: other.data, size: other.size, capacity: other.capacity};
            lifecycle_msgs__msg__Transition__Sequence__are_equal(&msg1, &msg2)
        }
    }
}

